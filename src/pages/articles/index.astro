---
import { getCollection } from 'astro:content';
import Layout from '~/layouts/PageLayout.astro';
import Hero from '~/components/widgets/Hero.astro';
import { t, getCurrentLanguage } from '~/i18n';
import Image from '~/components/common/Image.astro';

function extractLanguageFromId(id: string): string {
  const match = id.match(/^([a-z]{2})\//);
  return match ? match[1] : 'en';
}

const lang = getCurrentLanguage();

// Get all articles (NO server-side filtering for static build - client will filter)
const articles = await getCollection('articles', ({ data }) => !data.draft);

const featuredArticles = articles.filter((item) => item.data.featured);
const sortedArticles = articles.sort(
  (a, b) =>
    new Date(b.data.publishDate || b.data.updateDate || 0).getTime() -
    new Date(a.data.publishDate || a.data.updateDate || 0).getTime()
);

const metadata = {
  title: t('pages.articles.title', lang),
  description: t('pages.articles.description', lang),
};
---

<Layout metadata={metadata}>
  <!-- Hero Section -->
  <Hero>
    <Fragment slot="title">
      <span data-i18n-key="pages.articles.heroTitle">{t('pages.articles.heroTitle', lang)}</span>
    </Fragment>
    <Fragment slot="subtitle">
      <span data-i18n-key="pages.articles.heroSubtitle">{t('pages.articles.heroSubtitle', lang)}</span>
    </Fragment>
  </Hero>

  <!-- Featured Articles -->
  {
    featuredArticles.length > 0 && (
      <section class="px-4 py-16 mx-auto max-w-7xl lg:px-8 lg:py-20">
        <div class="mb-12 text-center">
          <h2
            class="text-3xl font-bold tracking-tight text-gray-900 dark:text-white sm:text-4xl"
            data-i18n-key="pages.articles.featuredArticles"
          >
            {t('pages.articles.featuredArticles', lang)}
          </h2>
          <p class="mt-4 text-lg text-gray-600 dark:text-gray-300" data-i18n-key="pages.articles.featuredDesc">
            {t('pages.articles.featuredDesc', lang)}
          </p>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-16">
          {featuredArticles.slice(0, 2).map((article) => (
            <article
              class="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden"
              data-lang={extractLanguageFromId(article.id)}
            >
              {article.data.image && (
                <Image
                  src={article.data.image}
                  alt={article.data.title}
                  class="w-full h-64 object-cover"
                  widths={[400, 800]}
                  width={400}
                  sizes="(max-width: 1024px) 100vw, 50vw"
                  aspectRatio="16:9"
                  layout="cover"
                  loading="lazy"
                  decoding="async"
                />
              )}

              <div class="p-8">
                <div class="flex items-center justify-between mb-4">
                  <span
                    class="inline-block px-3 py-1 text-sm bg-blue-100 text-blue-800 rounded-full dark:bg-blue-900 dark:text-blue-200"
                    data-i18n-key="pages.articles.featured"
                  >
                    {t('pages.articles.featured', lang)}
                  </span>
                  <time class="text-sm text-gray-500 dark:text-gray-400">
                    {article.data.publishDate
                      ? new Date(article.data.publishDate).toLocaleDateString()
                      : t('pages.articles.noDate', lang)}
                  </time>
                </div>

                <h3 class="text-2xl font-bold mb-4 dark:text-white">
                  <a
                    href={`/articles/${article.data.slug || article.id}`}
                    class="hover:text-blue-600 dark:hover:text-blue-400 transition-colors"
                  >
                    {article.data.title}
                  </a>
                </h3>

                <p class="text-gray-600 dark:text-gray-300 mb-6">
                  {article.data.description || article.data.excerpt || 'No description available.'}
                </p>

                {/* Tags */}
                {article.data.tags && article.data.tags.length > 0 && (
                  <div class="mb-6">
                    <div class="flex flex-wrap gap-2">
                      {article.data.tags.slice(0, 4).map((tag: string) => (
                        <span class="px-2 py-1 text-xs bg-gray-100 text-gray-600 rounded dark:bg-gray-700 dark:text-gray-400">
                          {tag}
                        </span>
                      ))}
                      {article.data.tags.length > 4 && (
                        <span class="px-2 py-1 text-xs text-gray-500 dark:text-gray-400">
                          +{article.data.tags.length - 4} more
                        </span>
                      )}
                    </div>
                  </div>
                )}

                {/* Metadata */}
                <div class="flex items-center justify-between text-sm text-gray-500 dark:text-gray-400">
                  <span>{article.data.author || 'Anonymous'}</span>
                  {article.data.readingTime && <span>{article.data.readingTime} min read</span>}
                </div>
              </div>
            </article>
          ))}
        </div>
      </section>
    )
  }

  <!-- All Articles -->
  <section class="px-4 py-16 mx-auto max-w-7xl lg:px-8 lg:py-20 bg-gray-50 dark:bg-gray-900">
    <div class="mb-12 text-center">
      <h2
        class="text-3xl font-bold tracking-tight text-gray-900 dark:text-white sm:text-4xl"
        data-i18n-key="pages.articles.allArticles"
      >
        {t('pages.articles.allArticles', lang)}
      </h2>
      <p class="mt-4 text-lg text-gray-600 dark:text-gray-300" data-i18n-key="pages.articles.allArticlesDesc">
        {t('pages.articles.allArticlesDesc', lang)}
      </p>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {
        sortedArticles.map((article) => (
          <article
            class="bg-white dark:bg-gray-800 rounded-lg shadow-md hover:shadow-lg transition-shadow overflow-hidden"
            data-lang={extractLanguageFromId(article.id)}
          >
            {article.data.image && (
              <Image
                src={article.data.image}
                alt={article.data.title}
                class="w-full h-48 object-cover"
                widths={[300, 600]}
                width={300}
                sizes="(max-width: 768px) 100vw, (max-width: 1024px) 50vw, 33vw"
                aspectRatio="16:9"
                layout="cover"
                loading="lazy"
                decoding="async"
              />
            )}

            <div class="p-6">
              <div class="flex items-center justify-between mb-3">
                {article.data.featured && (
                  <span
                    class="inline-block px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded-full dark:bg-blue-900 dark:text-blue-200"
                    data-i18n-key="pages.articles.featured"
                  >
                    {t('pages.articles.featured', lang)}
                  </span>
                )}
                {article.data.category && (
                  <span class="inline-block px-2 py-1 text-xs bg-green-100 text-green-800 rounded-full dark:bg-green-900 dark:text-green-200">
                    {article.data.category}
                  </span>
                )}
                <time class="text-sm text-gray-500 dark:text-gray-400">
                  {article.data.publishDate
                    ? new Date(article.data.publishDate).toLocaleDateString()
                    : t('pages.articles.noDate', lang)}
                </time>
              </div>

              <h3 class="text-xl font-bold mb-3 dark:text-white">
                <a
                  href={`/articles/${article.data.slug || article.id}`}
                  class="hover:text-blue-600 dark:hover:text-blue-400 transition-colors"
                >
                  {article.data.title}
                </a>
              </h3>

              <p class="text-gray-600 dark:text-gray-300 mb-4 text-sm">
                {article.data.description || article.data.excerpt || t('pages.articles.noDescription', lang)}
              </p>

              {/* Tags */}
              {article.data.tags && article.data.tags.length > 0 && (
                <div class="mb-4">
                  <div class="flex flex-wrap gap-1">
                    {article.data.tags.slice(0, 3).map((tag: string) => (
                      <span class="px-2 py-1 text-xs bg-gray-100 text-gray-600 rounded dark:bg-gray-700 dark:text-gray-400">
                        {tag}
                      </span>
                    ))}
                    {article.data.tags.length > 3 && (
                      <span class="px-2 py-1 text-xs text-gray-500 dark:text-gray-400">
                        +{article.data.tags.length - 3} more
                      </span>
                    )}
                  </div>
                </div>
              )}

              {/* Metadata */}
              <div class="flex items-center justify-between text-sm text-gray-500 dark:text-gray-400">
                <span>{article.data.author || t('pages.articles.anonymous', lang)}</span>
                {article.data.readingTime && (
                  <span>
                    {article.data.readingTime} {t('pages.articles.minRead', lang)}
                  </span>
                )}
              </div>
            </div>
          </article>
        ))
      }
    </div>

    {
      sortedArticles.length === 0 && (
        <div class="text-center py-12">
          <div class="text-gray-500 dark:text-gray-400">
            <svg class="mx-auto h-12 w-12 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
              />
            </svg>
            <h3 class="text-lg font-medium mb-2" data-i18n-key="pages.articles.noArticlesYet">
              {t('pages.articles.noArticlesYet', lang)}
            </h3>
            <p class="text-sm" data-i18n-key="pages.articles.checkBackSoon">
              {t('pages.articles.checkBackSoon', lang)}
            </p>
          </div>
        </div>
      )
    }
  </section>
</Layout>

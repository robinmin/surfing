---
import { getCollection, render } from 'astro:content';

import MarkdownLayout from '~/layouts/MarkdownLayout.astro';
import ExternalPageLayout from '~/layouts/ExternalPageLayout.astro';

export async function getStaticPaths() {
  const documents = await getCollection('documents', ({ data }) => !data.draft);

  return documents.map((document) => ({
    params: {
      slug: document.data.slug || document.id,
    },
    props: { document },
  }));
}

const { document } = Astro.props;

// Determine file type and layout based on file extension and content characteristics
const fileExtension = document.id.split('.').pop()?.toLowerCase();
const isHtmlFile = fileExtension === 'html';
const hasCustomStyling = document.data.customCSS || document.data.customJS ||
                        document.data.externalCSS?.length || document.data.externalJS?.length;

// Use ExternalPageLayout for HTML files or files with custom styling
// Use MarkdownLayout for standard markdown files
const useExternalLayout = isHtmlFile || hasCustomStyling;

// Get content based on layout type
const { Content } = useExternalLayout ? { Content: () => document.body } : await render(document);

// Merge custom metadata with defaults
const metadata = {
  title: document.data.metadata?.title || document.data.title,
  description: document.data.metadata?.description || document.data.description,
  canonical: new URL(`documents/${document.data.slug || document.id}`, Astro.site).href,
  robots: {
    index: true,
    follow: true,
    ...document.data.metadata?.robots,
  },
  ...document.data.metadata,
  openGraph: {
    type: 'article',
    ...(document.data.image && { images: [{ url: document.data.image }] }),
    ...document.data.metadata?.openGraph,
  },
};
---

{useExternalLayout ? (
  <ExternalPageLayout metadata={metadata} entry={document}>
    <div set:html={document.body} />
  </ExternalPageLayout>
) : (
  <MarkdownLayout
    frontmatter={{
      title: document.data.title,
      description: document.data.description,
      publishDate: document.data.publishDate,
      updateDate: document.data.updateDate,
      readingTime: document.data.readingTime,
      tags: document.data.tags,
      author: document.data.author,
    }}
    metadata={metadata}
  >
    <Content />
  </MarkdownLayout>
)}

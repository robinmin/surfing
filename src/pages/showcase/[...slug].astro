---
import { getCollection, type CollectionEntry } from 'astro:content';

import MarkdownLayout from '~/layouts/MarkdownLayout.astro';

export async function getStaticPaths() {
  const showcases = await getCollection('showcase', ({ data }) => data.featured !== false);

  return showcases.map((showcase) => ({
    params: {
      slug: showcase.data.slug || showcase.id,
    },
    props: { showcase },
  }));
}

interface Props {
  showcase: CollectionEntry<'showcase'>;
}

const { showcase } = Astro.props;
const { Content } = await (showcase as any).render();
---

<MarkdownLayout frontmatter={{ title: showcase.data.title }}>
  <!-- Project Links -->
  {(showcase.data.projectUrl || showcase.data.githubUrl) && (
    <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-6 mb-8">
      <h3 class="text-lg font-semibold mb-4 dark:text-white">Project Links</h3>
      <div class="flex flex-wrap gap-4">
        {showcase.data.projectUrl && (
          <a
            href={showcase.data.projectUrl}
            target="_blank"
            rel="noopener noreferrer"
            class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
            </svg>
            Live Demo
          </a>
        )}
        {showcase.data.githubUrl && (
          <a
            href={showcase.data.githubUrl}
            target="_blank"
            rel="noopener noreferrer"
            class="inline-flex items-center px-4 py-2 bg-gray-800 text-white rounded-lg hover:bg-gray-900 transition-colors"
          >
            <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
            </svg>
            Source Code
          </a>
        )}
      </div>
    </div>
  )}

  <!-- Technologies -->
  {showcase.data.technologies && showcase.data.technologies.length > 0 && (
    <div class="mb-8">
      <h3 class="text-lg font-semibold mb-4 dark:text-white">Technologies Used</h3>
      <div class="flex flex-wrap gap-2">
        {showcase.data.technologies.map((tech: string) => (
          <span class="px-3 py-1 bg-gray-100 text-gray-800 rounded-full text-sm dark:bg-gray-700 dark:text-gray-200">
            {tech}
          </span>
        ))}
      </div>
    </div>
  )}

  <Content />
</MarkdownLayout>
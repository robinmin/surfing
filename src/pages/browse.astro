---
import Layout from '~/layouts/PageLayout.astro';
import Hero from '~/components/widgets/Hero.astro';
import { getAllContent, filterContent, sortContent, extractTags, extractCategories } from '~/utils/content';
import { DEFAULT_LANGUAGE, getServerTranslation } from '~/i18n';
import { findImage } from '~/utils/images';
import { Image } from 'astro:assets';

// Use default language for SSG, will be updated on client
const t = getServerTranslation(DEFAULT_LANGUAGE);

// Get all content for the browser
const allContent = await getAllContent();
const publishedContent = filterContent(allContent, { draft: false });
const sortedContent = sortContent(publishedContent, 'date', 'desc');

// Resolve all images
for (const entry of sortedContent) {
  if (entry.data.image) {
    entry.data.resolvedImage = await findImage(entry.data.image);
  }
}

// Get available filters
const allTags = extractTags(publishedContent);
const allCategories = extractCategories(publishedContent);

const metadata = {
  title: t('pages.browse.title'),
  description: t('pages.browse.description'),
};
---

<Layout metadata={metadata}>
  <!-- Hero Section -->
  <Hero>
    <Fragment slot="title">
      <span data-i18n="pages.browse.heroTitle">{t('pages.browse.heroTitle')}</span>
    </Fragment>
    <Fragment slot="subtitle">
      <span data-i18n="pages.browse.heroSubtitle">{t('pages.browse.heroSubtitle')}</span>
    </Fragment>
  </Hero>

  <!-- Content Browser -->
  <section class="px-4 py-16 mx-auto max-w-7xl lg:px-8 lg:py-20">
    <!-- Search and Filters -->
    <div class="mb-8">
      <div class="flex flex-col lg:flex-row gap-4 mb-6">
        <!-- Search Input -->
        <div class="flex-1">
          <input
            type="text"
            id="searchInput"
            placeholder={t('pages.browse.searchPlaceholder')}
            data-i18n-placeholder="pages.browse.searchPlaceholder"
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-800 dark:border-gray-600 dark:text-white"
          />
        </div>

        <!-- Content Type Filter -->
        <select
          id="typeFilter"
          class="px-4 py-2 border border-gray-300 rounded-lg dark:bg-gray-800 dark:border-gray-600 dark:text-white"
        >
          <option value="" data-i18n="pages.browse.allTypes">{t('pages.browse.allTypes')}</option>
          <option value="articles" data-i18n="nav.articles">{t('nav.articles')}</option>
          <option value="post" data-i18n="pages.browse.blogPost">{t('pages.browse.blogPost')}</option>
          <option value="showcase" data-i18n="nav.showcase">{t('nav.showcase')}</option>
          <option value="documents" data-i18n="nav.documents">{t('nav.documents')}</option>
        </select>

        <!-- Sort Options -->
        <select
          id="sortFilter"
          class="px-4 py-2 border border-gray-300 rounded-lg dark:bg-gray-800 dark:border-gray-600 dark:text-white"
        >
          <option value="date-desc" data-i18n="pages.browse.latestFirst">{t('pages.browse.latestFirst')}</option>
          <option value="date-asc" data-i18n="pages.browse.oldestFirst">{t('pages.browse.oldestFirst')}</option>
          <option value="title-asc" data-i18n="pages.browse.titleAZ">{t('pages.browse.titleAZ')}</option>
          <option value="title-desc" data-i18n="pages.browse.titleZA">{t('pages.browse.titleZA')}</option>
        </select>
      </div>

      <!-- Tag Filter -->
      <div class="mb-4">
        <h3 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2" data-i18n="pages.browse.filterByTags">
          {t('pages.browse.filterByTags')}
        </h3>
        <div class="flex flex-wrap gap-2" id="tagFilter">
          {
            allTags.map((tag) => (
              <button
                class="tag-filter px-3 py-1 text-sm bg-gray-200 text-gray-700 rounded-full hover:bg-blue-200 transition-colors dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-blue-600"
                data-tag={tag}
              >
                {tag}
              </button>
            ))
          }
        </div>
      </div>

      <!-- Category Filter -->
      <div class="mb-6">
        <h3 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2" data-i18n="pages.browse.filterByCategory">
          {t('pages.browse.filterByCategory')}
        </h3>
        <div class="flex flex-wrap gap-2" id="categoryFilter">
          {
            allCategories.map((category) => (
              <button
                class="category-filter px-3 py-1 text-sm bg-gray-200 text-gray-700 rounded-full hover:bg-green-200 transition-colors dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-green-600"
                data-category={category}
              >
                {category}
              </button>
            ))
          }
        </div>
      </div>
    </div>

    <!-- Content Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="contentGrid">
      {
        sortedContent.map((entry) => {
          const contentType = entry.data.contentType || entry.collection;
          const slug = entry.data.slug || entry.id;
          const url =
            contentType === 'articles'
              ? `/articles/${slug}`
              : contentType === 'showcase'
                ? `/showcase/${slug}`
                : contentType === 'documents'
                  ? `/documents/${slug}`
                  : contentType === 'cheatsheets'
                    ? `/cheatsheets/${slug}`
                    : `/articles/${slug}`;

          return (
            <article
              class="content-card bg-white dark:bg-gray-800 rounded-lg shadow-md hover:shadow-lg transition-shadow overflow-hidden"
              data-type={contentType}
              data-tags={JSON.stringify(entry.data.tags || [])}
              data-category={entry.data.category || ''}
              data-title={entry.data.title.toLowerCase()}
              data-description={(entry.data.description || entry.data.excerpt || '').toLowerCase()}
              data-date={entry.data.publishDate || entry.data.updateDate || new Date()}
            >
              {entry.data.resolvedImage && (
                <Image
                  src={entry.data.resolvedImage}
                  alt={entry.data.title}
                  class="w-full h-48 object-cover"
                  width={400}
                  height={200}
                />
              )}

              <div class="p-6">
                {/* Content Type Badge */}
                <span
                  class={`inline-block px-2 py-1 text-xs rounded-full mb-3 ${
                    contentType === 'articles'
                      ? 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200'
                      : contentType === 'showcase'
                        ? 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200'
                        : contentType === 'documents'
                          ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'
                          : contentType === 'cheatsheets'
                            ? 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200'
                            : 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200'
                  }`}
                  data-i18n={
                    contentType === 'articles'
                      ? 'pages.browse.article'
                      : contentType === 'showcase'
                        ? 'pages.browse.showcase'
                        : contentType === 'documents'
                          ? 'pages.browse.document'
                          : contentType === 'cheatsheets'
                            ? 'pages.browse.cheatsheet'
                            : 'pages.browse.blogPost'
                  }
                >
                  {contentType === 'articles'
                    ? t('pages.browse.article')
                    : contentType === 'showcase'
                      ? t('pages.browse.showcase')
                      : contentType === 'documents'
                        ? t('pages.browse.document')
                        : contentType === 'cheatsheets'
                          ? 'Cheatsheet'
                          : t('pages.browse.blogPost')}
                </span>

                <h3 class="text-xl font-bold mb-2 dark:text-white">
                  <a href={url} class="hover:text-blue-600 dark:hover:text-blue-400 transition-colors">
                    {entry.data.title}
                  </a>
                </h3>

                <p class="text-gray-600 dark:text-gray-300 mb-4 text-sm">
                  {entry.data.description || entry.data.excerpt || t('pages.articles.noDescription')}
                </p>

                {/* Tags */}
                {entry.data.tags && entry.data.tags.length > 0 && (
                  <div class="flex flex-wrap gap-1 mb-4">
                    {entry.data.tags.slice(0, 3).map((tag: string) => (
                      <span class="px-2 py-1 text-xs bg-gray-100 text-gray-600 rounded dark:bg-gray-700 dark:text-gray-400">
                        {tag}
                      </span>
                    ))}
                    {entry.data.tags.length > 3 && (
                      <span class="px-2 py-1 text-xs text-gray-500 dark:text-gray-400">
                        +{entry.data.tags.length - 3} more
                      </span>
                    )}
                  </div>
                )}

                {/* Metadata */}
                <div class="flex items-center justify-between text-sm text-gray-500 dark:text-gray-400">
                  <span>
                    {entry.data.publishDate
                      ? new Date(entry.data.publishDate).toLocaleDateString()
                      : t('pages.articles.noDate')}
                  </span>
                  {entry.data.readingTime && (
                    <span>
                      {entry.data.readingTime} {t('pages.articles.minRead')}
                    </span>
                  )}
                </div>
              </div>
            </article>
          );
        })
      }
    </div>

    <!-- No Results Message -->
    <div id="noResults" class="hidden text-center py-12">
      <div class="text-gray-500 dark:text-gray-400">
        <svg class="mx-auto h-12 w-12 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
          ></path>
        </svg>
        <h3 class="text-lg font-medium mb-2" data-i18n="pages.browse.noContentFound">
          {t('pages.browse.noContentFound')}
        </h3>
        <p class="text-sm" data-i18n="pages.browse.adjustFilters">{t('pages.browse.adjustFilters')}</p>
      </div>
    </div>
  </section>

  <!-- JavaScript for Interactive Filtering -->
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const searchInput = document.getElementById('searchInput') as HTMLInputElement;
      const typeFilter = document.getElementById('typeFilter') as HTMLSelectElement;
      const sortFilter = document.getElementById('sortFilter') as HTMLSelectElement;
      const tagButtons = document.querySelectorAll('.tag-filter');
      const categoryButtons = document.querySelectorAll('.category-filter');

      const selectedTags = new Set();
      const selectedCategories = new Set();

      function filterAndSortContent() {
        const searchTerm = searchInput.value.toLowerCase();
        const selectedType = typeFilter.value;
        const sortOption = sortFilter.value;
        const cards = Array.from(document.querySelectorAll('.content-card'));

        // Filter cards
        const filteredCards = cards.filter((card) => {
          const htmlCard = card as HTMLElement;
          const cardType = htmlCard.dataset.type;
          const cardTags = JSON.parse(htmlCard.dataset.tags || '[]');
          const cardCategory = htmlCard.dataset.category;
          const cardTitle = htmlCard.dataset.title;
          const cardDescription = htmlCard.dataset.description;

          // Type filter
          if (selectedType && cardType !== selectedType) return false;

          // Search filter
          if (searchTerm && !cardTitle?.includes(searchTerm) && !cardDescription?.includes(searchTerm)) {
            return false;
          }

          // Tag filter
          if (selectedTags.size > 0) {
            const hasMatchingTag = Array.from(selectedTags).some((tag) =>
              cardTags.some((cardTag: string) => cardTag.toLowerCase() === tag)
            );
            if (!hasMatchingTag) return false;
          }

          // Category filter
          if (selectedCategories.size > 0 && !selectedCategories.has(cardCategory)) {
            return false;
          }

          return true;
        });

        // Sort cards
        filteredCards.sort((a, b) => {
          const [sortBy, order] = sortOption.split('-');
          const aElement = a as HTMLElement;
          const bElement = b as HTMLElement;
          let aValue: any, bValue: any;

          if (sortBy === 'date') {
            aValue = new Date(aElement.dataset.date || '');
            bValue = new Date(bElement.dataset.date || '');
          } else if (sortBy === 'title') {
            aValue = aElement.dataset.title || '';
            bValue = bElement.dataset.title || '';
          }

          if (order === 'asc') {
            return aValue < bValue ? -1 : aValue > bValue ? 1 : 0;
          } else {
            return aValue > bValue ? -1 : aValue < bValue ? 1 : 0;
          }
        });

        // Update display
        cards.forEach((card) => ((card as HTMLElement).style.display = 'none'));
        filteredCards.forEach((card) => ((card as HTMLElement).style.display = 'block'));

        // Show/hide no results message
        const noResults = document.getElementById('noResults');
        if (filteredCards.length === 0) {
          noResults?.classList.remove('hidden');
        } else {
          noResults?.classList.add('hidden');
        }
      }

      // Event listeners
      searchInput?.addEventListener('input', filterAndSortContent);
      typeFilter?.addEventListener('change', filterAndSortContent);
      sortFilter?.addEventListener('change', filterAndSortContent);

      tagButtons.forEach((button) => {
        button.addEventListener('click', function () {
          const tag = this.dataset.tag;
          if (selectedTags.has(tag)) {
            selectedTags.delete(tag);
            this.classList.remove('bg-blue-500', 'text-white', 'dark:bg-blue-600');
            this.classList.add('bg-gray-200', 'text-gray-700', 'dark:bg-gray-700', 'dark:text-gray-300');
          } else {
            selectedTags.add(tag);
            this.classList.remove('bg-gray-200', 'text-gray-700', 'dark:bg-gray-700', 'dark:text-gray-300');
            this.classList.add('bg-blue-500', 'text-white', 'dark:bg-blue-600');
          }
          filterAndSortContent();
        });
      });

      categoryButtons.forEach((button) => {
        button.addEventListener('click', function () {
          const category = this.dataset.category;
          if (selectedCategories.has(category)) {
            selectedCategories.delete(category);
            this.classList.remove('bg-green-500', 'text-white', 'dark:bg-green-600');
            this.classList.add('bg-gray-200', 'text-gray-700', 'dark:bg-gray-700', 'dark:text-gray-300');
          } else {
            selectedCategories.add(category);
            this.classList.remove('bg-gray-200', 'text-gray-700', 'dark:bg-gray-700', 'dark:text-gray-300');
            this.classList.add('bg-green-500', 'text-white', 'dark:bg-green-600');
          }
          filterAndSortContent();
        });
      });
    });
  </script>
</Layout>

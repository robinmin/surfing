---
import { twMerge } from 'tailwind-merge';

interface Props {
  class?: string;
  width?: string;
  height?: string;
  type?: 'sign-in' | 'continue' | 'sign-up';
  tooltip?: string;
}

const { class: className = '', width = '100%', height = '44px', tooltip = '', ...rest } = Astro.props;

// Generate unique ID for this component instance
const buttonId = `apple-signin-${Math.random().toString(36).substring(2, 11)}`;
---

<div
  id={buttonId}
  class={twMerge('apple-signin-container', className)}
  style={`width: ${width}; height: ${height};`}
  title={tooltip}
  {...rest}
>
  <!-- Apple Sign-In button will be rendered here -->
</div>

<script>
  import { initializeAppleAuth, signInWithApple } from '~/lib/apple-auth';

  // Initialize component when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    // Get the container element - find by class pattern instead
    const containers = document.querySelectorAll('[id^="apple-signin-"]');
    const container = containers[containers.length - 1]; // Get the last one
    if (!container) {
      console.error('Apple Sign In container not found');
      return;
    }

    // Show loading state
    const showLoading = (type = 'loading', message?: string) => {
      const loadingMessage = message || 'Loading Apple Sign-In...';
      container.innerHTML = `
      <div class="apple-loading-container flex items-center justify-center w-full h-full p-4 border rounded-lg bg-gray-50 dark:bg-gray-800 border-gray-200 dark:border-gray-700">
        <div class="flex flex-col items-center space-y-3">
          <!-- Apple Icon -->
          <svg class="w-6 h-6 text-gray-800 dark:text-gray-200 animate-pulse" viewBox="0 0 24 24">
            <path fill="currentColor" d="M17.05 20.28c-.98.95-2.05.8-3.08.35-1.09-.46-2.09-.48-3.24 0-1.44.62-2.2.44-3.06-.35C2.79 15.25 3.51 7.59 9.05 7.31c1.35.07 2.29.74 3.08.8 1.18-.24 2.31-.93 3.57-.84 1.51.12 2.65.72 3.4 1.8-3.12 1.87-2.38 5.98.48 7.13-.57 1.5-1.31 2.99-2.54 4.09l.01-.01zM12.03 7.25c-.15-2.23 1.66-4.07 3.74-4.25.29 2.58-2.34 4.5-3.74 4.25z"/>
          </svg>

          <!-- Loading Spinner -->
          <div class="animate-spin rounded-full h-5 w-5 border-b-2 border-gray-600 dark:border-gray-400"></div>

          <!-- Loading Text -->
          <div class="text-center">
            <p class="text-gray-600 dark:text-gray-300 text-sm font-medium">${loadingMessage}</p>
            ${type === 'signing-in' ? '<p class="text-gray-500 dark:text-gray-400 text-xs mt-1">Please complete the sign-in in the popup</p>' : ''}
          </div>

          <!-- Progress Indicator -->
          ${
            type === 'validating'
              ? `
            <div class="w-full max-w-xs">
              <div class="h-1 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden">
                <div class="h-full bg-gray-600 dark:bg-gray-400 rounded-full animate-pulse" style="width: 60%; animation: shimmer 2s infinite;"></div>
              </div>
            </div>
          `
              : ''
          }

          <!-- Dots Animation for certain types -->
          ${
            type === 'loading'
              ? `
            <div class="flex space-x-1">
              <div class="w-2 h-2 bg-gray-600 dark:bg-gray-400 rounded-full animate-bounce" style="animation-delay: 0ms;"></div>
              <div class="w-2 h-2 bg-gray-600 dark:bg-gray-400 rounded-full animate-bounce" style="animation-delay: 150ms;"></div>
              <div class="w-2 h-2 bg-gray-600 dark:bg-gray-400 rounded-full animate-bounce" style="animation-delay: 300ms;"></div>
            </div>
          `
              : ''
          }
        </div>
      </div>
    `;
    };

    // Show error state
    const showError = (message: string) => {
      console.log('Error:', message); // Keep for debugging
      container.innerHTML = `
      <div class="flex flex-col items-center justify-center w-full h-full p-4 border border-red-200 rounded-lg bg-red-50">
        <svg class="w-5 h-5 text-red-500 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        <p class="text-red-600 text-sm text-center">${message}</p>
        <button
          class="mt-2 text-red-700 hover:text-red-900 text-sm underline"
          onclick="this.closest('.apple-signin-container').dispatchEvent(new CustomEvent('retryAppleSignIn'))"
        >
          Retry
        </button>
      </div>
    `;
    };

    // Show success state (signed in)
    const showSuccess = (userData: any) => {
      container.innerHTML = `
      <div class="flex items-center justify-center w-full h-full p-4 border border-green-200 rounded-lg bg-green-50">
        <svg class="w-5 h-5 text-green-500 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
        </svg>
        <div>
          <p class="text-green-600 text-sm font-medium">Signed in</p>
          <p class="text-green-500 text-xs">${userData.user?.email || ''}</p>
        </div>
      </div>
    `;

      // Emit custom event for parent components
      window.dispatchEvent(new CustomEvent('appleSignInSuccess', { detail: userData }));
    };

    // Show Apple Sign In button
    const showAppleButton = () => {
      // Get button text based on type - use default since we can't pass type
      const getButtonText = (buttonType: string) => {
        switch (buttonType) {
          case 'continue':
            return 'Continue with Apple';
          case 'sign-up':
            return 'Sign up with Apple';
          case 'sign-in':
          default:
            return 'Sign in with Apple';
        }
      };

      const buttonText = getButtonText('sign-in'); // Default to sign-in
      const isDarkVariant = false; // Default to light variant
      const textColor = isDarkVariant ? 'text-white' : 'text-gray-800';
      const bgColor = isDarkVariant ? 'bg-black' : 'bg-white';
      const borderColor = isDarkVariant ? 'border-black' : 'border-gray-300';

      container.innerHTML = `
      <button
        class="apple-signin-button flex items-center justify-center w-full h-full px-4 border ${borderColor} ${bgColor} rounded-lg hover:shadow-md transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-gray-400"
        type="button"
        aria-label="${buttonText}"
      >
        <svg class="w-5 h-5 mr-2" viewBox="0 0 24 24" fill="${isDarkVariant ? 'white' : 'currentColor'}">
          <path d="M17.05 20.28c-.98.95-2.05.8-3.08.35-1.09-.46-2.09-.48-3.24 0-1.44.62-2.2.44-3.06-.35C2.79 15.25 3.51 7.59 9.05 7.31c1.35.07 2.29.74 3.08.8 1.18-.24 2.31-.93 3.57-.84 1.51.12 2.65.72 3.4 1.8-3.12 1.87-2.38 5.98.48 7.13-.57 1.5-1.31 2.99-2.54 4.09l.01-.01zM12.03 7.25c-.15-2.23 1.66-4.07 3.74-4.25.29 2.58-2.34 4.5-3.74 4.25z"/>
        </svg>
        <span class="${textColor} text-sm font-medium">${buttonText}</span>
      </button>
    `;

      // Add click handler to the button
      const button = container.querySelector('.apple-signin-button');
      if (button) {
        button.addEventListener('click', handleAppleSignIn);
      }
    };

    // Handle Apple Sign In
    const handleAppleSignIn = async () => {
      try {
        showLoading('signing-in', 'Connecting to Apple...');

        // Initialize Apple Sign In
        await initializeAppleAuth();

        showLoading('validating', 'Verifying your Apple account...');

        // Perform sign in
        const userData = await signInWithApple();

        showSuccess(userData);
      } catch (error) {
        console.error('Apple sign in error:', error);
        let message = 'Failed to sign in with Apple';

        if (error.message) {
          if (error.message.includes('environment variable')) {
            message = 'Apple Sign In not configured';
          } else if (error.message.includes('popup')) {
            message = 'Please allow popups for this site';
          } else if (error.message.includes('network')) {
            message = 'Network error. Please try again';
          } else {
            message = error.message;
          }
        }

        showError(message);
      }
    };

    // Initialize component
    const initComponent = async () => {
      try {
        showLoading('loading', 'Setting up Apple Sign-In...');

        // Check if Apple environment variables are configured safely
        let clientId: string | undefined, redirectURI: string | undefined;
        try {
          clientId = typeof import.meta.env !== 'undefined' ? import.meta.env.PUBLIC_APPLE_SERVICES_ID : undefined;
          redirectURI = typeof import.meta.env !== 'undefined' ? import.meta.env.PUBLIC_APPLE_REDIRECT_URI : undefined;
        } catch {
          throw new Error(
            'Apple Sign In not configured. Please set PUBLIC_APPLE_SERVICES_ID and PUBLIC_APPLE_REDIRECT_URI.'
          );
        }

        if (!clientId || !redirectURI) {
          throw new Error(
            'Apple Sign In not configured. Please set PUBLIC_APPLE_SERVICES_ID and PUBLIC_APPLE_REDIRECT_URI.'
          );
        }

        // Show the Apple Sign In button
        showAppleButton();
      } catch (error) {
        console.error('Apple Sign In component initialization error:', error);
        showError(error.message || 'Failed to initialize Apple Sign In');
      }
    };

    // Listen for retry events
    container.addEventListener('retryAppleSignIn', handleAppleSignIn);

    // Initialize component
    initComponent();

    // Listen for sign out events
    const handleSignOut = () => {
      setTimeout(() => {
        showAppleButton();
      }, 100);
    };

    window.addEventListener('appleSignOut', handleSignOut);

    // Cleanup on component unmount
    const cleanup = () => {
      window.removeEventListener('appleSignOut', handleSignOut);
      container.removeEventListener('retryAppleSignIn', handleAppleSignIn);
    };

    // Export cleanup for potential external use
    if (typeof window !== 'undefined') {
      window.appleSignInCleanup = cleanup;
    }
  });
</script>

<style>
  .apple-signin-container {
    @apply relative overflow-hidden;
    @apply w-full;
    @apply flex items-center justify-center;
  }

  .apple-signin-button {
    @apply no-underline;
  }

  .apple-signin-button:hover {
    @apply transform scale-105;
  }

  .apple-signin-button:active {
    @apply transform scale-95;
  }

  .apple-signin-button:focus {
    @apply ring-offset-2;
  }

  /* Apple-specific styling */
  .apple-signin-button svg {
    @apply flex-shrink-0;
  }

  /* Custom error states */
  .apple-signin-container .border-red-200 {
    border-color: #fecaca;
  }

  .apple-signin-container .bg-red-50 {
    background-color: #fef2f2;
  }

  .apple-signin-container .text-red-600 {
    color: #dc2626;
  }

  .apple-signin-container .text-red-700 {
    color: #b91c1c;
  }

  .apple-signin-container .text-red-900 {
    color: #7f1d1d;
  }

  /* Custom success states */
  .apple-signin-container .border-green-200 {
    border-color: #bbf7d0;
  }

  .apple-signin-container .bg-green-50 {
    background-color: #f0fdf4;
  }

  .apple-signin-container .text-green-600 {
    color: #16a34a;
  }

  .apple-signin-container .text-green-500 {
    color: #22c55e;
  }

  /* Loading animation */
  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  .animate-spin {
    animation: spin 1s linear infinite;
  }

  /* Enhanced loading animations */
  @keyframes shimmer {
    0% {
      transform: translateX(-100%);
    }
    100% {
      transform: translateX(100%);
    }
  }

  @keyframes bounce {
    0%,
    80%,
    100% {
      transform: scale(0);
    }
    40% {
      transform: scale(1);
    }
  }

  .apple-loading-container .animate-bounce {
    animation: bounce 1.4s infinite ease-in-out both;
  }

  /* Dark mode support */
  .dark .bg-gray-50 {
    background-color: rgba(31, 41, 55, 0.8);
  }

  .dark .border-gray-200 {
    border-color: rgba(75, 85, 99, 0.5);
  }

  .dark .text-gray-600 {
    color: rgba(209, 213, 219, 0.9);
  }

  .dark .text-gray-500 {
    color: rgba(156, 163, 175, 0.9);
  }

  .dark .bg-gray-200 {
    background-color: rgba(75, 85, 99, 0.5);
  }

  .dark .bg-gray-700 {
    background-color: rgba(55, 65, 81, 0.8);
  }
</style>

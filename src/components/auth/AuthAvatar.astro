---
/**
 * AuthAvatar Component
 * Main component that combines AvatarButton with LoginPopupMenu or UserMenu
 * Handles authentication state and click interactions
 */
import { Icon } from 'astro-icon/components';
import LoginPopupMenu from './LoginPopupMenu.astro';
import UserMenu from './UserMenu.astro';

export interface Props {
  size?: 'sm' | 'md' | 'lg';
  className?: string;
}

const { size = 'md', className = '' } = Astro.props;

// Size configurations
const sizeClasses = {
  sm: 'h-8 w-8',
  md: 'h-10 w-10',
  lg: 'h-12 w-12',
};

const iconSizeClasses = {
  sm: 'h-4 w-4',
  md: 'h-5 w-5',
  lg: 'h-6 w-6',
};
---

<div class:list={['auth-avatar-container relative', className]}>
  <!-- Avatar Button - shows grey icon when logged out, user photo when logged in -->
  <button
    type="button"
    class:list={[
      'avatar-button relative flex items-center justify-center rounded-full',
      'border-2 shadow-sm hover:shadow-md',
      'hover:border-blue-400 dark:hover:border-blue-500 hover:scale-105',
      'transition-all duration-200 ease-in-out',
      'cursor-pointer focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2',
      sizeClasses[size],
    ]}
    aria-label="User menu"
    data-auth-avatar
  >
    <!-- Logged out state - grey avatar with user icon -->
    <div
      class:list={[
        'logged-out-avatar absolute inset-0 flex items-center justify-center rounded-full',
        'bg-gray-200 dark:bg-gray-700',
        'border-gray-300 dark:border-gray-600',
      ]}
      data-logged-out
    >
      <Icon name="tabler:user" class:list={['text-gray-500 dark:text-gray-400', iconSizeClasses[size]]} />
    </div>

    <!-- Logged in state - user profile picture -->
    <img
      class:list={[
        'logged-in-avatar absolute inset-0 rounded-full object-cover hidden',
        'border-gray-300 dark:border-gray-600',
      ]}
      src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%23667eea' d='M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm0 14.2c-2.5 0-4.71-1.28-6-3.22.03-1.99 4-3.08 6-3.08 1.99 0 5.97 1.09 6 3.08-1.29 1.94-3.5 3.22-6 3.22z'/%3E%3C/svg%3E"
      alt="User avatar"
      data-logged-in
    />
  </button>

  <!-- Login popup for logged out users -->
  <LoginPopupMenu />

  <!-- User menu for logged in users -->
  <UserMenu />
</div>

<script>
  import { initializeGoogleOneTap, signInWithGoogle, signOut, getCurrentSession } from '~/lib/google-auth';

  let isLoggedIn = false;

  // Handle avatar click to toggle appropriate menu
  const setupAvatarClick = () => {
    const container = document.querySelector('.auth-avatar-container');
    const avatarButton = container?.querySelector('[data-auth-avatar]');

    if (!avatarButton) {
      console.debug('Avatar button not found, skipping click handler setup');
      return;
    }

    // Remove existing event listeners to prevent duplicates
    const newAvatarButton = avatarButton.cloneNode(true);
    avatarButton.parentNode?.replaceChild(newAvatarButton, avatarButton);

    // Define the click handler function
    const handleAvatarClick = (e: Event) => {
      e.stopPropagation();
      console.debug('Avatar clicked, isLoggedIn:', isLoggedIn);

      // Find fresh references to menus each time
      const currentLoginMenu = container?.querySelector('[data-popup-menu]');
      const currentUserMenu = container?.querySelector('[data-user-menu]');

      if (isLoggedIn && currentUserMenu) {
        currentUserMenu.classList.toggle('show');
        currentLoginMenu?.classList.remove('show');
        console.debug('Showing user menu');
      } else if (currentLoginMenu) {
        currentLoginMenu.classList.toggle('show');
        currentUserMenu?.classList.remove('show');
        console.debug('Showing login menu');
      }
    };

    // Add click event listener
    newAvatarButton.addEventListener('click', handleAvatarClick);

    // Define outside click handler
    const handleOutsideClick = (e: Event) => {
      const currentContainer = document.querySelector('.auth-avatar-container');
      if (!currentContainer?.contains(e.target as Node)) {
        const currentLoginMenu = currentContainer?.querySelector('[data-popup-menu]');
        const currentUserMenu = currentContainer?.querySelector('[data-user-menu]');
        currentLoginMenu?.classList.remove('show');
        currentUserMenu?.classList.remove('show');
      }
    };

    // Define escape key handler
    const handleEscapeKey = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        const currentLoginMenu = document.querySelector('[data-popup-menu]');
        const currentUserMenu = document.querySelector('[data-user-menu]');
        currentLoginMenu?.classList.remove('show');
        currentUserMenu?.classList.remove('show');
      }
    };

    // Remove existing global listeners to prevent duplicates
    document.removeEventListener('click', handleOutsideClick);
    document.removeEventListener('keydown', handleEscapeKey);

    // Add fresh global event listeners
    document.addEventListener('click', handleOutsideClick);
    document.addEventListener('keydown', handleEscapeKey);

    console.debug('Avatar click handlers set up successfully');
  };

  // Update UI based on auth state
  const updateAuthUI = (session: any) => {
    const loggedOutAvatar = document.querySelector('[data-logged-out]');
    const loggedInAvatar = document.querySelector('[data-logged-in]') as HTMLImageElement;
    const userName = document.querySelector('[data-user-name]');
    const userEmail = document.querySelector('[data-user-email]');
    const providerLogo = document.querySelector('[data-provider-logo]');

    // Update global login state
    const wasLoggedIn = isLoggedIn;
    isLoggedIn = !!session?.user;

    console.debug('Updating auth UI:', {
      wasLoggedIn,
      isLoggedIn,
      hasSession: !!session?.user,
      userEmail: session?.user?.email,
    });

    if (session?.user) {
      // Show user avatar, hide grey avatar
      loggedOutAvatar?.classList.add('hidden');
      loggedInAvatar?.classList.remove('hidden');

      // Set user profile picture
      if (loggedInAvatar && session.user.user_metadata?.avatar_url) {
        loggedInAvatar.src = session.user.user_metadata.avatar_url;
        loggedInAvatar.style.background = ''; // Clear any fallback background
      } else if (loggedInAvatar && session.user.user_metadata?.picture) {
        loggedInAvatar.src = session.user.user_metadata.picture;
        loggedInAvatar.style.background = ''; // Clear any fallback background
      } else if (loggedInAvatar) {
        // Fallback: ensure avatar shows something when no metadata available
        // The default SVG will remain from the initial src
        loggedInAvatar.style.background = 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)';
        loggedInAvatar.alt = 'User avatar (logged in)';
      }

      // Update user info in menu
      if (userName) {
        userName.textContent = session.user.user_metadata?.full_name || session.user.email?.split('@')[0] || 'User';
      }
      if (userEmail) {
        userEmail.textContent = session.user.email || '';
      }

      // Update provider logo based on auth provider
      if (providerLogo) {
        // Check if user signed in with Google
        const isGoogleUser =
          session.user.app_metadata?.provider === 'google' ||
          session.user.user_metadata?.provider === 'google' ||
          session.user.email?.endsWith('@gmail.com');

        if (isGoogleUser) {
          providerLogo.innerHTML =
            '<svg class="h-5 w-5 text-blue-600 dark:text-blue-400" fill="currentColor" viewBox="0 0 24 24"><path d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/><path d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/><path d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/><path d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/></svg>';
          providerLogo.parentElement?.setAttribute('data-provider', 'google');
        } else {
          // Default or Apple user
          providerLogo.innerHTML =
            '<svg class="h-5 w-5 text-gray-800 dark:text-gray-200" fill="currentColor" viewBox="0 0 24 24"><path d="M18.71 19.5c-.83 1.24-1.71 2.45-3.05 2.47-1.34.03-1.77-.79-3.29-.79-1.53 0-2 .77-3.27.82-1.31.05-2.3-1.32-3.14-2.53C4.25 17 2.94 12.45 4.7 9.39c.87-1.52 2.43-2.48 4.12-2.51 1.28-.02 2.5.87 3.29.87.78 0 2.26-1.07 3.81-.91.65.03 2.47.26 3.64 1.98-.09.06-2.17 1.28-2.15 3.81.03 3.02 2.65 4.03 2.68 4.04-.03.07-.42 1.44-1.38 2.83M13 3.5c.73-.83 1.94-1.46 2.94-1.5.13 1.17-.34 2.35-1.04 3.19-.69.85-1.83 1.51-2.95 1.42-.15-1.15.41-2.35 1.05-3.11z"/></svg>';
          providerLogo.parentElement?.setAttribute('data-provider', 'apple');
        }
      }
    } else {
      isLoggedIn = false;

      // Show grey avatar, hide user avatar
      loggedOutAvatar?.classList.remove('hidden');
      loggedInAvatar?.classList.add('hidden');

      console.debug('User logged out, hiding user avatar');
    }

    // Re-initialize click handlers after UI update to ensure they work with new state
    setTimeout(async () => {
      setupAvatarClick();
      // Update translations when user state changes
      await updatePopupTranslations();
    }, 10);
  };

  // Global flag to track if Google has been initialized
  let isGoogleInitialized = false;

  // Initialize Google One Tap once on page load
  const initializeGoogle = async () => {
    if (isGoogleInitialized) {
      return;
    }

    try {
      await initializeGoogleOneTap(
        async (response) => {
          try {
            await signInWithGoogle(response.credential);
            console.log('Google sign in success');
            // Reload page to reflect authenticated state
            window.location.reload();
          } catch (error) {
            console.error('Google sign in error:', error);
          }
        },
        (error) => {
          console.error('Google initialization error:', error);
        }
      );
      isGoogleInitialized = true;
      console.debug('Google One Tap initialized successfully');
    } catch (error) {
      console.error('Failed to initialize Google Sign In:', error);
    }
  };

  // Handle login option clicks
  const setupLoginHandlers = () => {
    const googleButton = document.querySelector('.login-option-google');
    const appleButton = document.querySelector('.login-option-apple');

    // Google Sign In - Remove existing listeners by cloning
    if (googleButton) {
      const newGoogleButton = googleButton.cloneNode(true) as HTMLElement;
      googleButton.parentNode?.replaceChild(newGoogleButton, googleButton);

      newGoogleButton.addEventListener('click', async () => {
        try {
          // Ensure Google is initialized
          if (!isGoogleInitialized) {
            await initializeGoogle();
          }

          // Use prompt() to trigger Google Sign In
          // This will automatically use FedCM if available, or fall back to One Tap
          if (window.google?.accounts?.id) {
            console.debug('Triggering Google Sign In (FedCM/One Tap)');

            // Suppress FedCM errors temporarily
            const originalConsoleError = console.error;
            console.error = (...args: any[]) => {
              const message = args.join(' ');
              if (message.includes('FedCM') || message.includes('GSI_LOGGER') || message.includes('NetworkError')) {
                console.debug('Suppressed FedCM error:', message);
                return;
              }
              return originalConsoleError.apply(console, args);
            };

            // Trigger the prompt - will use FedCM if available
            try {
              window.google.accounts.id.prompt();
            } catch (fedcmError) {
              console.debug('FedCM not available, error suppressed:', fedcmError);
            } finally {
              // Restore console.error after a delay
              setTimeout(() => {
                console.error = originalConsoleError;
              }, 2000);
            }
          } else {
            console.error('Google Sign In not available');
          }
        } catch (error) {
          console.error('Failed to show Google Sign In:', error);
        }
      });
    }

    // Apple Sign In - Remove existing listeners by cloning
    if (appleButton) {
      const newAppleButton = appleButton.cloneNode(true) as HTMLElement;
      appleButton.parentNode?.replaceChild(newAppleButton, appleButton);

      newAppleButton.addEventListener('click', () => {
        console.log('Apple Sign In clicked - to be implemented');
      });
    }
  };

  // Handle sign out
  const setupSignOutHandler = () => {
    const signOutButton = document.querySelector('.user-menu-signout') as HTMLButtonElement;

    if (signOutButton) {
      signOutButton.addEventListener('click', async () => {
        try {
          // Add visual feedback that sign out is processing
          signOutButton.disabled = true;
          signOutButton.innerHTML = `
            <Icon name="tabler:loader" class="h-5 w-5 text-red-600 dark:text-red-400 flex-shrink-0 animate-spin" />
            <span class="text-sm font-medium text-red-700 dark:text-red-300">Signing out...</span>
          `;

          await signOut();
          console.log('Sign out success');

          // Clear session storage (Supabase handles localStorage automatically)
          sessionStorage.clear();

          // Add a small delay to ensure all cleanup is complete
          setTimeout(() => {
            window.location.reload();
          }, 500);
        } catch (error) {
          console.error('Sign out error:', error);
          // Restore button state on error
          signOutButton.disabled = false;
          signOutButton.innerHTML = `
            <Icon name="tabler:logout" class="h-5 w-5 text-red-600 dark:text-red-400 flex-shrink-0 group-hover:scale-110 transition-transform duration-150" />
            <span class="text-sm font-medium text-red-700 dark:text-red-300 group-hover:text-red-800 dark:group-hover:text-red-200 transition-colors duration-150">Sign Out</span>
          `;
        }
      });
    }
  };

  // Check auth state and update UI
  const checkAuthState = async () => {
    try {
      const session = await getCurrentSession();
      updateAuthUI(session);
    } catch {
      console.debug('No active session');
      updateAuthUI(null);
    }
  };

  // Setup auth sync across tabs
  const setupAuthSync = async () => {
    const { initAuthSync, onAuthSync } = await import('~/lib/auth-sync');

    // Initialize auth sync
    initAuthSync();

    // Listen for auth events from other tabs
    onAuthSync((event) => {
      console.debug('Auth sync event received:', event);

      if (event === 'login') {
        // Reload page to reflect logged in state
        window.location.reload();
      } else if (event === 'logout') {
        // Reload page to reflect logged out state
        window.location.reload();
      }
    });
  };

  // Update popup menu translations when language changes
  const updatePopupTranslations = async () => {
    const { getPreferredLanguage, t } = await import('~/i18n');
    const lang = getPreferredLanguage();

    // Update login popup menu
    const loginTitle = document.querySelector('[data-popup-menu] .text-sm.font-semibold');
    const loginSubtitle = document.querySelector('[data-popup-menu] .text-xs.text-gray-500');
    const googleButtonText = document.querySelector('.login-option-google .text-sm.font-medium');
    const appleButtonText = document.querySelector('.login-option-apple .text-sm.font-medium');

    if (loginTitle) loginTitle.textContent = t('auth.signIn', lang);
    if (loginSubtitle) loginSubtitle.textContent = t('auth.oneClickLogin', lang);
    if (googleButtonText) googleButtonText.textContent = t('auth.signInWithGoogle', lang);
    if (appleButtonText) appleButtonText.textContent = t('auth.signInWithApple', lang);

    // Update user menu
    const signedInText = document.querySelector('[data-user-menu] .text-xs.text-gray-400');
    const signOutButtonText = document.querySelector('.user-menu-signout span');

    if (signedInText) signedInText.textContent = t('auth.signedInAs', lang);
    if (signOutButtonText) signOutButtonText.textContent = t('auth.signOut', lang);

    console.debug('Updated popup translations for language:', lang);
  };

  // Setup language change listener
  const setupLanguageListener = async () => {
    const { LANGUAGE_STORAGE_KEY } = await import('~/i18n');

    // Listen for language change events
    document.addEventListener('language:change', () => {
      console.debug('Language change detected, updating popup translations');
      setTimeout(async () => await updatePopupTranslations(), 50); // Small delay to ensure DOM is ready
    });

    // Listen for storage changes (for language changes in other tabs)
    window.addEventListener('storage', (e) => {
      if (e.key === LANGUAGE_STORAGE_KEY) {
        console.debug('Language change detected in storage, updating popup translations');
        setTimeout(async () => await updatePopupTranslations(), 50);
      }
    });

    // Set up a MutationObserver to detect language changes in the DOM
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
          const langButton = document.querySelector('[data-language-selector]');
          if (langButton) {
            const currentLang = langButton.getAttribute('data-current-lang');
            if (currentLang && currentLang !== (window as any).__lastLang) {
              (window as any).__lastLang = currentLang;
              setTimeout(async () => await updatePopupTranslations(), 50);
            }
          }
        }
      });
    });

    // Start observing the language button
    const langButton = document.querySelector('[data-language-selector]');
    if (langButton) {
      observer.observe(langButton, { attributes: true, attributeFilter: ['class'] });
    }
  };

  // Setup navigation listener to re-check auth state on page navigation
  const setupNavigationListener = () => {
    // Listen for browser navigation events
    const handleNavigation = () => {
      console.debug('Navigation detected, re-checking auth state');
      setTimeout(() => {
        checkAuthState();
        // Re-initialize event listeners after navigation to ensure they work with new DOM
        setupAvatarClick();
        setupLoginHandlers();
        setupSignOutHandler();
        // Google is already initialized, no need to re-initialize
      }, 100); // Small delay to ensure DOM is ready
    };

    // Listen for popstate events (browser back/forward)
    window.addEventListener('popstate', handleNavigation);

    // Listen for Astro view transitions if available
    if (typeof window !== 'undefined' && 'navigation' in window) {
      (window.navigation as any).addEventListener('navigate', handleNavigation);
    }

    // Listen for Astro view transition events
    document.addEventListener('astro:page-load', handleNavigation);
    document.addEventListener('astro:after-preparation', handleNavigation);
    document.addEventListener('astro:after-swap', handleNavigation);

    // Also set up a MutationObserver to detect when the AuthAvatar is added to DOM
    // This helps with dynamic content loading
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'childList') {
          mutation.addedNodes.forEach((node) => {
            if (node.nodeType === Node.ELEMENT_NODE) {
              const authAvatar = (node as Element).querySelector?.('[data-auth-avatar]');
              if (authAvatar) {
                console.debug('AuthAvatar detected in DOM, checking auth state');
                setTimeout(() => {
                  checkAuthState();
                  setupAvatarClick();
                  setupLoginHandlers();
                  setupSignOutHandler();
                  // Google is already initialized, no need to re-initialize
                }, 50);
              }
            }
          });
        }
      });
    });

    // Start observing the document body for changes
    observer.observe(document.body, {
      childList: true,
      subtree: true,
    });

    // Set up periodic auth state check as a fallback
    setInterval(async () => {
      const currentAvatar = document.querySelector('img[data-logged-in]') as HTMLImageElement;
      const loggedOutAvatar = document.querySelector('[data-logged-out]');

      // Check if user appears logged out but should be logged in (has auth tokens)
      // Since Supabase handles localStorage automatically, we just check our cache
      const hasValidCache = localStorage.getItem('auth_token_guardian_timestamp');
      const hasAuthToken = hasValidCache !== null; // If we have cache, user should be logged in

      if (hasAuthToken && hasValidCache && currentAvatar && loggedOutAvatar) {
        // User should be logged in but avatar shows default SVG
        if (currentAvatar.src.includes('data:image/svg+xml') && !loggedOutAvatar.classList.contains('hidden')) {
          console.debug(
            'Detected inconsistent auth state - user should be logged in but showing default avatar, re-checking'
          );
          checkAuthState();
          setupAvatarClick();
          setupLoginHandlers();
          setupSignOutHandler();
          // Google is already initialized, no need to re-initialize
        }
      }
    }, 2000); // Check every 2 seconds
  };

  // Initialize on page load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', async () => {
      setupAvatarClick();
      setupLoginHandlers();
      setupSignOutHandler();
      checkAuthState();
      setupAuthSync();
      setupLanguageListener();
      setupNavigationListener();
      // Pre-initialize Google for faster sign-in
      await initializeGoogle();
    });
  } else {
    setupAvatarClick();
    setupLoginHandlers();
    setupSignOutHandler();
    checkAuthState();
    setupAuthSync();
    setupLanguageListener();
    setupNavigationListener();
    // Pre-initialize Google for faster sign-in
    initializeGoogle();
  }
</script>

<style>
  .avatar-button {
    transform-origin: center;
  }

  .avatar-button:hover {
    transform: scale(1.05);
  }

  .avatar-button:active {
    transform: scale(0.95);
  }

  /* Responsive adjustments */
  @media (max-width: 640px) {
    .avatar-button {
      transform: scale(0.95);
    }

    .avatar-button:hover {
      transform: scale(1);
    }
  }
</style>

---
/**
 * AuthAvatar Component
 * Main component that combines AvatarButton with LoginPopupMenu or UserMenu
 * Handles authentication state and click interactions
 */
import { Icon } from 'astro-icon/components';
import LoginPopupMenu from './LoginPopupMenu.astro';
import UserMenu from './UserMenu.astro';

export interface Props {
  size?: 'sm' | 'md' | 'lg';
  className?: string;
}

const { size = 'md', className = '' } = Astro.props;

// Size configurations
const sizeClasses = {
  sm: 'h-8 w-8',
  md: 'h-10 w-10',
  lg: 'h-12 w-12',
};

const iconSizeClasses = {
  sm: 'h-4 w-4',
  md: 'h-5 w-5',
  lg: 'h-6 w-6',
};
---

<div class:list={['auth-avatar-container relative', className]}>
  <!-- Avatar Button - shows grey icon when logged out, user photo when logged in -->
  <button
    type="button"
    class:list={[
      'avatar-button relative flex items-center justify-center rounded-full',
      'border-2 shadow-sm hover:shadow-md',
      'hover:border-blue-400 dark:hover:border-blue-500 hover:scale-105',
      'transition-all duration-200 ease-in-out',
      'cursor-pointer focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2',
      sizeClasses[size],
    ]}
    aria-label="User menu"
    data-auth-avatar
  >
    <!-- Logged out state - grey avatar with user icon -->
    <div
      class:list={[
        'logged-out-avatar absolute inset-0 flex items-center justify-center rounded-full',
        'bg-gray-200 dark:bg-gray-700',
        'border-gray-300 dark:border-gray-600',
      ]}
      data-logged-out
    >
      <Icon name="tabler:user" class:list={['text-gray-500 dark:text-gray-400', iconSizeClasses[size]]} />
    </div>

    <!-- Logged in state - user profile picture -->
    <img
      class:list={[
        'logged-in-avatar absolute inset-0 rounded-full object-cover hidden',
        'border-gray-300 dark:border-gray-600',
      ]}
      src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%23667eea' d='M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm0 14.2c-2.5 0-4.71-1.28-6-3.22.03-1.99 4-3.08 6-3.08 1.99 0 5.97 1.09 6 3.08-1.29 1.94-3.5 3.22-6 3.22z'/%3E%3C/svg%3E"
      alt="User avatar"
      data-logged-in
    />
  </button>

  <!-- Login popup for logged out users -->
  <LoginPopupMenu />

  <!-- User menu for logged in users -->
  <UserMenu />
</div>

<script>
  import { initializeGoogleOneTap, signInWithGoogle, signOut, getCurrentSession } from '~/lib/google-auth';

  let isLoggedIn = false;

  // Handle avatar click to toggle appropriate menu
  const setupAvatarClick = () => {
    const container = document.querySelector('.auth-avatar-container');
    const avatarButton = container?.querySelector('[data-auth-avatar]');

    if (!avatarButton) {
      console.debug('Avatar button not found, skipping click handler setup');
      return;
    }

    // Remove existing event listeners to prevent duplicates
    const newAvatarButton = avatarButton.cloneNode(true);
    avatarButton.parentNode?.replaceChild(newAvatarButton, avatarButton);

    // Define the click handler function
    const handleAvatarClick = (e: Event) => {
      e.stopPropagation();
      console.debug('Avatar clicked, isLoggedIn:', isLoggedIn);

      // Find fresh references to menus each time
      const currentLoginMenu = container?.querySelector('[data-popup-menu]');
      const currentUserMenu = container?.querySelector('[data-user-menu]');

      if (isLoggedIn && currentUserMenu) {
        currentUserMenu.classList.toggle('show');
        currentLoginMenu?.classList.remove('show');
        console.debug('Showing user menu');
      } else if (currentLoginMenu) {
        currentLoginMenu.classList.toggle('show');
        currentUserMenu?.classList.remove('show');
        console.debug('Showing login menu');
      }
    };

    // Add click event listener
    newAvatarButton.addEventListener('click', handleAvatarClick);

    // Define outside click handler
    const handleOutsideClick = (e: Event) => {
      const currentContainer = document.querySelector('.auth-avatar-container');
      if (!currentContainer?.contains(e.target as Node)) {
        const currentLoginMenu = currentContainer?.querySelector('[data-popup-menu]');
        const currentUserMenu = currentContainer?.querySelector('[data-user-menu]');
        currentLoginMenu?.classList.remove('show');
        currentUserMenu?.classList.remove('show');
      }
    };

    // Define escape key handler
    const handleEscapeKey = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        const currentLoginMenu = document.querySelector('[data-popup-menu]');
        const currentUserMenu = document.querySelector('[data-user-menu]');
        currentLoginMenu?.classList.remove('show');
        currentUserMenu?.classList.remove('show');
      }
    };

    // Remove existing global listeners to prevent duplicates
    document.removeEventListener('click', handleOutsideClick);
    document.removeEventListener('keydown', handleEscapeKey);

    // Add fresh global event listeners
    document.addEventListener('click', handleOutsideClick);
    document.addEventListener('keydown', handleEscapeKey);

    console.debug('Avatar click handlers set up successfully');
  };

  // Update UI based on auth state
  const updateAuthUI = (session: any) => {
    const loggedOutAvatar = document.querySelector('[data-logged-out]');
    const loggedInAvatar = document.querySelector('[data-logged-in]') as HTMLImageElement;
    const userName = document.querySelector('[data-user-name]');
    const userEmail = document.querySelector('[data-user-email]');

    // Update global login state
    const wasLoggedIn = isLoggedIn;
    isLoggedIn = !!session?.user;

    console.debug('Updating auth UI:', {
      wasLoggedIn,
      isLoggedIn,
      hasSession: !!session?.user,
      userEmail: session?.user?.email,
    });

    if (session?.user) {
      // Show user avatar, hide grey avatar
      loggedOutAvatar?.classList.add('hidden');
      loggedInAvatar?.classList.remove('hidden');

      // Set user profile picture
      if (loggedInAvatar && session.user.user_metadata?.avatar_url) {
        loggedInAvatar.src = session.user.user_metadata.avatar_url;
        loggedInAvatar.style.background = ''; // Clear any fallback background
      } else if (loggedInAvatar && session.user.user_metadata?.picture) {
        loggedInAvatar.src = session.user.user_metadata.picture;
        loggedInAvatar.style.background = ''; // Clear any fallback background
      } else if (loggedInAvatar) {
        // Fallback: ensure avatar shows something when no metadata available
        // The default SVG will remain from the initial src
        loggedInAvatar.style.background = 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)';
        loggedInAvatar.alt = 'User avatar (logged in)';
      }

      // Update user info in menu
      if (userName) {
        userName.textContent = session.user.user_metadata?.full_name || session.user.email?.split('@')[0] || 'User';
      }
      if (userEmail) {
        userEmail.textContent = session.user.email || '';
      }
    } else {
      isLoggedIn = false;

      // Show grey avatar, hide user avatar
      loggedOutAvatar?.classList.remove('hidden');
      loggedInAvatar?.classList.add('hidden');

      console.debug('User logged out, hiding user avatar');
    }

    // Re-initialize click handlers after UI update to ensure they work with new state
    setTimeout(() => {
      setupAvatarClick();
    }, 10);
  };

  // Handle login option clicks
  const setupLoginHandlers = () => {
    const googleButton = document.querySelector('.login-option-google');
    const appleButton = document.querySelector('.login-option-apple');

    // Google Sign In
    if (googleButton) {
      googleButton.addEventListener('click', async () => {
        try {
          // Initialize Google One Tap
          await initializeGoogleOneTap(
            async (response) => {
              try {
                await signInWithGoogle(response.credential);
                console.log('Google sign in success');
                // Reload page to reflect authenticated state
                window.location.reload();
              } catch (error) {
                console.error('Google sign in error:', error);
              }
            },
            (error) => {
              console.error('Google initialization error:', error);
            }
          );

          // Trigger Google prompt
          if (window.google?.accounts?.id) {
            window.google.accounts.id.prompt();
          }
        } catch (error) {
          console.error('Failed to initialize Google Sign In:', error);
        }
      });
    }

    // Apple Sign In (placeholder for future implementation)
    if (appleButton) {
      appleButton.addEventListener('click', () => {
        console.log('Apple Sign In clicked - to be implemented');
      });
    }
  };

  // Handle sign out
  const setupSignOutHandler = () => {
    const signOutButton = document.querySelector('.user-menu-signout');

    if (signOutButton) {
      signOutButton.addEventListener('click', async () => {
        try {
          await signOut();
          console.log('Sign out success');
          window.location.reload();
        } catch (error) {
          console.error('Sign out error:', error);
        }
      });
    }
  };

  // Check auth state and update UI
  const checkAuthState = async () => {
    try {
      const session = await getCurrentSession();
      updateAuthUI(session);
    } catch {
      console.debug('No active session');
      updateAuthUI(null);
    }
  };

  // Setup auth sync across tabs
  const setupAuthSync = async () => {
    const { initAuthSync, onAuthSync } = await import('~/lib/auth-sync');

    // Initialize auth sync
    initAuthSync();

    // Listen for auth events from other tabs
    onAuthSync((event) => {
      console.debug('Auth sync event received:', event);

      if (event === 'login') {
        // Reload page to reflect logged in state
        window.location.reload();
      } else if (event === 'logout') {
        // Reload page to reflect logged out state
        window.location.reload();
      }
    });
  };

  // Setup navigation listener to re-check auth state on page navigation
  const setupNavigationListener = () => {
    // Listen for browser navigation events
    const handleNavigation = () => {
      console.debug('Navigation detected, re-checking auth state');
      setTimeout(() => {
        checkAuthState();
        // Re-initialize event listeners after navigation to ensure they work with new DOM
        setupAvatarClick();
        setupLoginHandlers();
        setupSignOutHandler();
      }, 100); // Small delay to ensure DOM is ready
    };

    // Listen for popstate events (browser back/forward)
    window.addEventListener('popstate', handleNavigation);

    // Listen for Astro view transitions if available
    if (typeof window !== 'undefined' && 'navigation' in window) {
      (window.navigation as any).addEventListener('navigate', handleNavigation);
    }

    // Listen for Astro view transition events
    document.addEventListener('astro:page-load', handleNavigation);
    document.addEventListener('astro:after-preparation', handleNavigation);
    document.addEventListener('astro:after-swap', handleNavigation);

    // Also set up a MutationObserver to detect when the AuthAvatar is added to DOM
    // This helps with dynamic content loading
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'childList') {
          mutation.addedNodes.forEach((node) => {
            if (node.nodeType === Node.ELEMENT_NODE) {
              const authAvatar = (node as Element).querySelector?.('[data-auth-avatar]');
              if (authAvatar) {
                console.debug('AuthAvatar detected in DOM, checking auth state');
                setTimeout(() => {
                  checkAuthState();
                  setupAvatarClick();
                  setupLoginHandlers();
                  setupSignOutHandler();
                }, 50);
              }
            }
          });
        }
      });
    });

    // Start observing the document body for changes
    observer.observe(document.body, {
      childList: true,
      subtree: true,
    });

    // Set up periodic auth state check as a fallback
    setInterval(() => {
      const currentAvatar = document.querySelector('img[data-logged-in]') as HTMLImageElement;
      const loggedOutAvatar = document.querySelector('[data-logged-out]');

      // Check if user appears logged out but should be logged in (has auth tokens)
      const hasAuthToken = localStorage.getItem('sb-txenxuywwzrftyoooblu-auth-token');
      const hasValidCache = localStorage.getItem('auth_token_guardian_timestamp');

      if (hasAuthToken && hasValidCache && currentAvatar && loggedOutAvatar) {
        // User should be logged in but avatar shows default SVG
        if (currentAvatar.src.includes('data:image/svg+xml') && !loggedOutAvatar.classList.contains('hidden')) {
          console.debug(
            'Detected inconsistent auth state - user should be logged in but showing default avatar, re-checking'
          );
          checkAuthState();
          setupAvatarClick();
          setupLoginHandlers();
          setupSignOutHandler();
        }
      }
    }, 2000); // Check every 2 seconds
  };

  // Initialize on page load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      setupAvatarClick();
      setupLoginHandlers();
      setupSignOutHandler();
      checkAuthState();
      setupAuthSync();
      setupNavigationListener();
    });
  } else {
    setupAvatarClick();
    setupLoginHandlers();
    setupSignOutHandler();
    checkAuthState();
    setupAuthSync();
    setupNavigationListener();
  }
</script>

<style>
  .avatar-button {
    transform-origin: center;
  }

  .avatar-button:hover {
    transform: scale(1.05);
  }

  .avatar-button:active {
    transform: scale(0.95);
  }

  /* Responsive adjustments */
  @media (max-width: 640px) {
    .avatar-button {
      transform: scale(0.95);
    }

    .avatar-button:hover {
      transform: scale(1);
    }
  }
</style>

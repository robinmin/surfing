---
import { Icon } from 'astro-icon/components';
import Loading from '~/components/ui/Loading.astro';

interface Props {
  class?: string;
  type?: 'initializing' | 'signing-in' | 'validating' | 'signing-out' | 'loading' | 'checking-session';
  provider?: 'google' | 'apple' | 'general';
  size?: 'sm' | 'md' | 'lg';
  showText?: boolean;
  customText?: string;
  overlay?: boolean;
}

const {
  class: className = '',
  type = 'loading',
  provider = 'general',
  size = 'md',
  showText = true,
  customText,
  overlay = false,
  ...rest
} = Astro.props;

// Get loading text based on type and provider
const getLoadingText = (type: string, provider: string, customText?: string) => {
  if (customText) return customText;

  const providerText = provider === 'google' ? 'Google' : provider === 'apple' ? 'Apple' : '';

  switch (type) {
    case 'initializing':
      return 'Initializing authentication...';
    case 'signing-in':
      return `Signing in with ${providerText}...`;
    case 'validating':
      return 'Validating session...';
    case 'signing-out':
      return 'Signing out...';
    case 'checking-session':
      return 'Checking session...';
    case 'loading':
    default:
      return providerText ? `Loading ${providerText}...` : 'Loading...';
  }
};

// Get loading variant based on type
const getLoadingVariant = (type: string) => {
  switch (type) {
    case 'validating':
    case 'checking-session':
      return 'dots';
    case 'signing-out':
      return 'pulse';
    default:
      return 'spinner';
  }
};

// Get loading color based on provider
const getLoadingColor = (provider: string) => {
  switch (provider) {
    case 'google':
      return 'blue';
    case 'apple':
      return 'gray';
    default:
      return 'blue';
  }
};

const text = getLoadingText(type, provider, customText);
const variant = getLoadingVariant(type);
const color = getLoadingColor(provider);

// Generate unique ID for this component instance
const loadingId = `auth-loading-${Math.random().toString(36).substring(2, 11)}`;
---

<div
  id={loadingId}
  class={`auth-loading-component ${overlay ? 'fixed inset-0 z-50' : 'relative'} ${className}`}
  {...rest}
>
  <!-- Main Loading Content -->
  <div
    class={`flex flex-col items-center justify-center p-6 rounded-lg border backdrop-blur-sm ${
      !overlay
        ? 'bg-white/90 dark:bg-gray-800/90 border-gray-200/50 dark:border-gray-700/50'
        : 'bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 shadow-lg'
    }`}
  >
    <!-- Provider Icon (if applicable) -->
    {
      provider !== 'general' && (
        <div class="mb-3">
          {provider === 'google' && <Icon name="tabler:brand-google" class={`w-6 h-6 text-blue-600`} />}
          {provider === 'apple' && (
            <Icon name="tabler:brand-apple" class={`w-6 h-6 text-gray-800 dark:text-gray-200`} />
          )}
        </div>
      )
    }

    <!-- Loading Component -->
    <Loading variant={variant} color={color} size={size} text={text} showText={showText} class="mb-2" />

    <!-- Additional Context Text -->
    {
      type === 'signing-in' && (
        <p class="text-xs text-gray-500 dark:text-gray-400 text-center max-w-xs">
          Please complete the sign-in process in the popup window
        </p>
      )
    }

    {
      type === 'validating' && (
        <p class="text-xs text-gray-500 dark:text-gray-400 text-center max-w-xs">
          Verifying your authentication credentials
        </p>
      )
    }

    {
      type === 'initializing' && (
        <p class="text-xs text-gray-500 dark:text-gray-400 text-center max-w-xs">Setting up secure authentication</p>
      )
    }

    <!-- Progress Indicator for certain types -->
    {
      (type === 'initializing' || type === 'checking-session') && (
        <div class="w-full max-w-xs mt-3">
          <div class="h-1 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden">
            <div
              class="h-full bg-blue-600 dark:bg-blue-500 rounded-full animate-pulse"
              style="width: 60%; animation: shimmer 2s infinite;"
            />
          </div>
        </div>
      )
    }
  </div>
</div>

<style>
  /* Shimmer animation for progress bars */
  @keyframes shimmer {
    0% {
      transform: translateX(-100%);
    }
    100% {
      transform: translateX(100%);
    }
  }

  .animate-pulse-slow {
    animation: pulse-slow 3s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }

  @keyframes pulse-slow {
    0%,
    100% {
      opacity: 1;
    }
    50% {
      opacity: 0.7;
    }
  }

  /* Enhanced backdrop blur for overlay */
  .backdrop-blur-sm {
    backdrop-filter: blur(4px);
  }

  /* Dark mode adjustments */
  .dark .bg-white\/90 {
    background-color: rgba(17, 24, 39, 0.9);
  }

  .dark .bg-gray-800\/90 {
    background-color: rgba(31, 41, 55, 0.9);
  }

  .dark .border-gray-200\/50 {
    border-color: rgba(229, 231, 235, 0.5);
  }

  .dark .border-gray-700\/50 {
    border-color: rgba(75, 85, 99, 0.5);
  }
</style>

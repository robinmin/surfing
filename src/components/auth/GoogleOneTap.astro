---
import { twMerge } from 'tailwind-merge';

interface Props {
  class?: string;
  theme?: 'outline' | 'filled_blue' | 'filled_black';
  size?: 'large' | 'medium' | 'small';
  text?: 'signin_with' | 'signup_with' | 'continue_with';
  shape?: 'rectangular' | 'pill' | 'square' | 'circle';
  logo_alignment?: 'left' | 'center';
  width?: string;
  locale?: string;
  tooltip?: string;
}

const {
  class: className = '',
  theme = 'outline',
  size = 'large',
  text = 'signin_with',
  shape = 'rectangular',
  logo_alignment = 'left',
  width = '',
  locale = 'en',
  tooltip = '',
  ...rest
} = Astro.props;

// Generate unique ID for this component instance
const buttonId = `google-signin-${Math.random().toString(36).substring(2, 11)}`;
---

<div id={buttonId} class={twMerge('google-signin-container', className)} title={tooltip} {...rest}>
  <!-- Google Sign-In button will be rendered here -->
</div>

<!-- Google One Tap container (hidden by default) -->
<div
  id="g_id_onload"
  data-client_id=""
  data-context="signin"
  data-ux_mode="popup"
  data-callback=""
  data-auto_select="false"
  data-cancel_on_tap_outside="false"
  data-itp_support="true"
>
</div>

<!-- Google Sign In button (Fallback) -->
<div
  class="g_id_signin"
  data-type="standard"
  data-shape={shape}
  data-theme={theme}
  data-text={text}
  data-size={size}
  data-logo_alignment={logo_alignment}
  data-width={width ? width : undefined}
  data-locale={locale}
  data-client_id=""
>
</div>

<script>
  import { initializeGoogleOneTap, signInWithGoogle } from '~/lib/google-auth';

  // Initialize component when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    // Get the container element - find by class pattern instead
    const containers = document.querySelectorAll('[id^="google-signin-"]');
    const container = containers[containers.length - 1]; // Get the last one
    if (!container) {
      console.error('Google One Tap container not found');
      return;
    }

    // Show loading state
    const showLoading = (type = 'loading', message = '') => {
      const loadingMessage = message || 'Loading Google Sign-In...';
      container.innerHTML = `
      <div class="google-loading-container flex items-center justify-center p-4 border rounded-lg bg-gray-50 dark:bg-gray-800 border-gray-200 dark:border-gray-700">
        <div class="flex flex-col items-center space-y-3">
          <!-- Google Icon -->
          <svg class="w-6 h-6 text-blue-600 animate-pulse" viewBox="0 0 24 24">
            <path fill="currentColor" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
            <path fill="currentColor" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
            <path fill="currentColor" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
            <path fill="currentColor" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
          </svg>

          <!-- Loading Spinner -->
          <div class="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600"></div>

          <!-- Loading Text -->
          <div class="text-center">
            <p class="text-gray-600 dark:text-gray-300 text-sm font-medium">${loadingMessage}</p>
            ${type === 'signing-in' ? '<p class="text-gray-500 dark:text-gray-400 text-xs mt-1">Please complete the sign-in in the popup</p>' : ''}
          </div>

          <!-- Progress Indicator -->
          ${
            type === 'validating'
              ? `
            <div class="w-full max-w-xs">
              <div class="h-1 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden">
                <div class="h-full bg-blue-600 rounded-full animate-pulse" style="width: 60%; animation: shimmer 2s infinite;"></div>
              </div>
            </div>
          `
              : ''
          }
        </div>
      </div>
    `;
    };

    // Show error state
    const showError = (message: string) => {
      console.log('Error:', message); // Keep for debugging
      container.innerHTML = `
      <div class="p-4 border border-red-200 rounded-lg bg-red-50">
        <p class="text-red-600 text-sm">${message}</p>
        <button
          class="mt-2 text-blue-600 hover:text-blue-800 text-sm underline"
          onclick="location.reload()"
        >
          Retry
        </button>
      </div>
    `;
    };

    // Show success state (signed in)
    const showSuccess = (userData: any) => {
      container.innerHTML = `
      <div class="p-4 border border-green-200 rounded-lg bg-green-50">
        <div class="flex items-center">
          <img
            src="${userData.user?.user_metadata?.avatar_url || userData.user?.user_metadata?.picture || ''}"
            alt="Avatar"
            class="w-8 h-8 rounded-full mr-3"
            onerror="this.style.display='none'"
          />
          <div>
            <p class="text-green-600 text-sm font-medium">Signed in as ${userData.user?.email || 'Unknown'}</p>
          </div>
        </div>
      </div>
    `;

      // Emit custom event for parent components
      window.dispatchEvent(new CustomEvent('googleSignInSuccess', { detail: userData }));
    };

    // Initialize Google One Tap
    const initGoogleOneTap = async () => {
      try {
        // Check if we're in development and using a test client ID
        const clientId = import.meta.env?.PUBLIC_GOOGLE_CLIENT_ID || '';
        const isDev = import.meta.env.DEV;
        const isTestClientId =
          clientId === '511333300252-2d54h6n4th9q0c3r1ed7k4eq9c5dj7v.apps.googleusercontent.com' ||
          clientId === '644801417181-e1glvt4j9tpsaakvfqrlfrq56m277e4f.apps.googleusercontent.com';

        if (isDev && isTestClientId) {
          // In development with test client ID, show a helpful message instead of trying to initialize
          showError(
            'Google Sign-In is using test credentials. Configure production OAuth client ID for full functionality.'
          );
          return;
        }

        showLoading('loading', 'Initializing Google Sign-In...');

        await initializeGoogleOneTap(
          // Success callback
          async (response) => {
            try {
              showLoading('validating', 'Verifying your Google account...');
              const userData = await signInWithGoogle(response.credential);
              showSuccess(userData);
            } catch (error) {
              console.error('Google sign in error:', error);
              showError(error instanceof Error ? error.message : 'Failed to sign in with Google');
            }
          },
          // Error callback
          (error) => {
            console.error('Google One Tap initialization error:', error);
            let errorMessage = 'Failed to initialize Google Sign-In. Please try again later.';

            // Check for specific error types
            if (error.message) {
              if (error.message.includes('origin is not allowed')) {
                errorMessage = 'Google Sign-In domain configuration needed. Add localhost to authorized domains.';
              } else if (error.message.includes('client_id') || error.message.includes('not found')) {
                errorMessage = 'Google OAuth client ID not configured or invalid.';
              }
            }

            showError(errorMessage);
          }
        );

        // Hide loading if initialization succeeds (button will be shown by Google)
      } catch (error) {
        console.error('Google One Tap setup error:', error);
        showError('Failed to set up Google Sign-In. Please try again later.');
      }
    };

    // Set client ID in HTML attributes safely
    const setClientIds = () => {
      try {
        const clientId = import.meta.env?.PUBLIC_GOOGLE_CLIENT_ID || '';
        const onloadDiv = document.getElementById('g_id_onload');
        const signinDiv = container.querySelector('.g_id_signin');

        if (onloadDiv) {
          onloadDiv.setAttribute('data-client_id', clientId);
        }
        if (signinDiv) {
          signinDiv.setAttribute('data-client_id', clientId);
        }
      } catch (error) {
        console.warn('Failed to set Google client ID:', error);
      }
    };

    // Set client IDs before initializing
    setClientIds();

    // Initialize component
    initGoogleOneTap();

    // Listen for sign out events
    const handleSignOut = () => {
      // Reset component to initial state
      setTimeout(() => {
        location.reload();
      }, 100);
    };

    window.addEventListener('googleSignOut', handleSignOut);

    // Cleanup on component unmount
    const cleanup = () => {
      window.removeEventListener('googleSignOut', handleSignOut);
    };

    // Export cleanup for potential external use
    if (typeof window !== 'undefined') {
      window.googleOneTapCleanup = cleanup;
    }
  });
</script>

<style>
  .google-signin-container {
    @apply min-h-[44px] flex items-center justify-center;
  }

  /* Google One Tap styles */
  .g_id_signin {
    @apply flex items-center justify-center;
  }

  .g_id_signin iframe {
    @apply border-0;
  }

  /* Hide Google One Tap by default (we'll show it programmatically) */
  #g_id_onload {
    display: none;
  }

  /* Custom error states */
  .google-signin-container .border-red-200 {
    border-color: #fecaca;
  }

  .google-signin-container .bg-red-50 {
    background-color: #fef2f2;
  }

  .google-signin-container .text-red-600 {
    color: #dc2626;
  }

  /* Custom success states */
  .google-signin-container .border-green-200 {
    border-color: #bbf7d0;
  }

  .google-signin-container .bg-green-50 {
    background-color: #f0fdf4;
  }

  .google-signin-container .text-green-600 {
    color: #16a34a;
  }

  /* Enhanced loading animations */
  @keyframes shimmer {
    0% {
      transform: translateX(-100%);
    }
    100% {
      transform: translateX(100%);
    }
  }

  .google-loading-container .animate-pulse {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }

  /* Dark mode support */
  .dark .bg-gray-50 {
    background-color: rgba(31, 41, 55, 0.8);
  }

  .dark .border-gray-200 {
    border-color: rgba(75, 85, 99, 0.5);
  }

  .dark .text-gray-600 {
    color: rgba(209, 213, 219, 0.9);
  }

  .dark .text-gray-500 {
    color: rgba(156, 163, 175, 0.9);
  }

  .dark .bg-gray-200 {
    background-color: rgba(75, 85, 99, 0.5);
  }

  .dark .bg-gray-700 {
    background-color: rgba(55, 65, 81, 0.8);
  }
</style>

---
import { twMerge } from 'tailwind-merge';
import { Icon } from 'astro-icon/components';
import GoogleOneTap from '~/components/auth/GoogleOneTap.astro';
import AppleSignIn from '~/components/auth/AppleSignIn.astro';
import AuthLoading from '~/components/auth/AuthLoading.astro';

// Fallback values for Astro components (these get updated at runtime)
const defaultAuthMethods = {
  google: true,
  apple: false,
  showDivider: false,
};

/**
 * Component props interface
 */
export interface Props {
  class?: string;
  variant?: 'default' | 'compact' | 'expanded';
  showLogoutButton?: boolean;
  showAvatar?: boolean;
  showEmail?: boolean;
  showProviderBadge?: boolean;
  loadingText?: string;
  errorText?: string;
  logoutButtonText?: string;
  googleConfig?: {
    theme?: 'outline' | 'filled_blue' | 'filled_black';
    size?: 'large' | 'medium' | 'small';
    text?: 'signin_with' | 'signup_with' | 'continue_with';
  };
  appleConfig?: {
    type?: 'sign-in' | 'continue' | 'sign-up';
  };
}

const {
  class: className = '',
  variant = 'default',
  showLogoutButton = true,
  showAvatar = true,
  showEmail = true,
  showProviderBadge = false,
  loadingText = 'Signing in...',
  errorText = 'Authentication failed',
  logoutButtonText = 'Sign out',
  googleConfig = {},
  appleConfig = {},
  ...rest
} = Astro.props;

// Generate unique IDs for this component instance
const containerId = `auth-container-${Math.random().toString(36).substring(2, 11)}`;
const loadingId = `auth-loading-${Math.random().toString(36).substring(2, 11)}`;
const errorId = `auth-error-${Math.random().toString(36).substring(2, 11)}`;
const loginId = `auth-login-${Math.random().toString(36).substring(2, 11)}`;
const profileId = `auth-profile-${Math.random().toString(36).substring(2, 11)}`;

// Determine styling based on variant
const getVariantClasses = (variant: string) => {
  switch (variant) {
    case 'compact':
      return 'space-y-2';
    case 'expanded':
      return 'space-y-6';
    case 'default':
    default:
      return 'space-y-4';
  }
};

const variantClasses = getVariantClasses(variant);

// Get enabled authentication methods - use fallback for SSR, runtime will handle async loading
const enabledAuthMethods = defaultAuthMethods;

// Only render the container if there are authentication methods enabled
const shouldRenderContainer = enabledAuthMethods.google || enabledAuthMethods.apple;
---

{
  shouldRenderContainer ? (
    <div id={containerId} class={twMerge('auth-container', variantClasses, className)} {...rest}>
      <div id={loadingId} class="auth-loading hidden">
        <AuthLoading
          type="initializing"
          provider="general"
          size="md"
          customText={loadingText}
          overlay={false}
          class="w-full"
        />
      </div>

      <div id={errorId} class="auth-error hidden">
        <div class="p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg">
          <div class="flex items-start">
            <div class="flex-shrink-0">
              <Icon name="tabler:alert-circle" class="h-5 w-5 text-red-400" aria-hidden="true" />
            </div>
            <div class="ml-3 flex-1">
              <h3 class="text-sm font-medium text-red-800 dark:text-red-200">Authentication Error</h3>
              <div class="mt-2 text-sm text-red-700 dark:text-red-300">
                <p>{errorText}</p>
              </div>
              <div class="mt-3">
                <button
                  type="button"
                  class="auth-retry-button text-sm bg-red-100 dark:bg-red-900/30 hover:bg-red-200 dark:hover:bg-red-900/50 text-red-800 dark:text-red-200 px-3 py-1.5 rounded-md transition-colors"
                >
                  Try Again
                </button>
              </div>
            </div>
            <div class="ml-auto pl-3">
              <div class="-mx-1.5 -my-1.5">
                <button
                  type="button"
                  class="auth-dismiss-error inline-flex rounded-md p-1.5 text-red-500 hover:bg-red-100 dark:hover:bg-red-900/30 transition-colors"
                >
                  <span class="sr-only">Dismiss</span>
                  <Icon name="tabler:x" class="h-5 w-5" aria-hidden="true" />
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div id={loginId} class="auth-login hidden">
        {enabledAuthMethods.google || enabledAuthMethods.apple ? (
          <div class="space-y-3">
            <div class="space-y-3">
              {enabledAuthMethods.google && (
                <div class="google-auth-container">
                  <GoogleOneTap
                    theme={googleConfig.theme || 'outline'}
                    size={googleConfig.size || 'large'}
                    text={googleConfig.text || 'signin_with'}
                    tooltip="By signing in, you agree to our terms of service and privacy policy"
                    class="w-full"
                  />
                </div>
              )}

              {enabledAuthMethods.showDivider && (
                <div class="relative">
                  <div class="absolute inset-0 flex items-center">
                    <div class="w-full border-t border-gray-300 dark:border-gray-600" />
                  </div>
                  <div class="relative flex justify-center text-sm">
                    <span class="px-2 bg-white dark:bg-gray-900 text-gray-500 dark:text-gray-400">or</span>
                  </div>
                </div>
              )}

              {enabledAuthMethods.apple && (
                <div class="apple-auth-container">
                  <AppleSignIn
                    type={appleConfig.type || 'sign-in'}
                    tooltip="By signing in, you agree to our terms of service and privacy policy"
                    class="w-full"
                  />
                </div>
              )}
            </div>
          </div>
        ) : null}
      </div>

      <div id={profileId} class="auth-profile hidden">
        <div class="flex items-center justify-between p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 shadow-sm">
          <div class="flex items-center space-x-3">
            {showAvatar && (
              <div class="auth-avatar">
                <img
                  class="h-10 w-10 rounded-full object-cover border-2 border-gray-200 dark:border-gray-600"
                  src=""
                  alt="User avatar"
                />
                <div class="h-10 w-10 rounded-full bg-gray-200 dark:bg-gray-700 flex items-center justify-center hidden">
                  <Icon name="tabler:user" class="h-5 w-5 text-gray-500 dark:text-gray-400" />
                </div>
              </div>
            )}

            <div class="auth-user-info">
              <div class="auth-name font-medium text-gray-900 dark:text-gray-100" />
              {showEmail && <div class="auth-email text-sm text-gray-500 dark:text-gray-400" />}
              {showProviderBadge && (
                <div class="auth-provider-badge mt-1">
                  <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-200">
                    <Icon name="tabler:brand-google" class="w-3 h-3 mr-1 auth-google-icon hidden" />
                    <Icon name="tabler:brand-apple" class="w-3 h-3 mr-1 auth-apple-icon hidden" />
                    <span class="auth-provider-text" />
                  </span>
                </div>
              )}
            </div>
          </div>

          <div class="flex items-center space-x-2">
            {showLogoutButton && (
              <button
                type="button"
                class="auth-logout-button inline-flex items-center px-3 py-1.5 border border-gray-300 dark:border-gray-600 shadow-sm text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors"
              >
                <Icon name="tabler:logout" class="w-4 h-4 mr-1.5" />
                {logoutButtonText}
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  ) : null
}

<script>
  import { initializeAuth, addAuthListener, signOut as signOutAuth, clearAuthError } from '~/lib/auth';

  // Initialize component when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    // Component state
    const authState = {
      user: null,
      isAuthenticated: false,
      isLoading: true,
      error: null as string | null,
    };

    // Get container elements - find by class patterns instead
    const container = document.querySelector('[id^="auth-container-"]');
    const loadingEl = document.querySelector('[id^="auth-loading-"]');
    const errorEl = document.querySelector('[id^="auth-error-"]');
    const loginEl = document.querySelector('[id^="auth-login-"]');
    const profileEl = document.querySelector('[id^="auth-profile-"]');

    if (!container) {
      // Container may not exist if no auth methods are enabled, which is expected
      return;
    }

    // Show loading state with specific type
    const showLoading = (type = 'initializing', message?: string) => {
      authState.isLoading = true;
      hideAllStates();

      // Update the AuthLoading component if it exists
      const authLoadingComponent = loadingEl?.querySelector('.auth-loading-component');
      if (authLoadingComponent) {
        // Update the type attribute on the component
        authLoadingComponent.setAttribute('data-type', type);
        if (message) {
          authLoadingComponent.setAttribute('data-message', message);
        }
      }

      loadingEl?.classList.remove('hidden');
    };

    // Show error state
    const showError = (error: string) => {
      authState.error = error;
      authState.isLoading = false;
      hideAllStates();
      errorEl?.classList.remove('hidden');
    };

    // Show login state
    const showLogin = () => {
      authState.isAuthenticated = false;
      authState.isLoading = false;
      authState.error = null;
      hideAllStates();
      loginEl?.classList.remove('hidden');
    };

    // Show profile state
    const showProfile = (user: any) => {
      authState.user = user;
      authState.isAuthenticated = true;
      authState.isLoading = false;
      authState.error = null;
      hideAllStates();
      profileEl?.classList.remove('hidden');
      updateProfileUI(user);
    };

    // Hide all states
    const hideAllStates = () => {
      loadingEl?.classList.add('hidden');
      errorEl?.classList.add('hidden');
      loginEl?.classList.add('hidden');
      profileEl?.classList.add('hidden');
    };

    // Update profile UI with user data
    const updateProfileUI = (user: any) => {
      if (!profileEl) return;

      // Update avatar
      const avatarImg = profileEl.querySelector('.auth-avatar img') as HTMLImageElement | null;
      const avatarFallback = profileEl.querySelector('.auth-avatar > div:last-child') as HTMLElement | null;

      if (avatarImg && user?.avatar_url) {
        avatarImg.src = user.avatar_url;
        avatarImg.style.display = 'block';
        if (avatarFallback) {
          avatarFallback.style.display = 'none';
        }
      } else if (avatarFallback) {
        avatarFallback.style.display = 'flex';
        if (avatarImg) avatarImg.style.display = 'none';
      }

      // Update user info
      const nameEl = profileEl.querySelector('.auth-name') as HTMLElement | null;
      const emailEl = profileEl.querySelector('.auth-email') as HTMLElement | null;

      if (nameEl) {
        nameEl.textContent = user?.name || user?.email || 'Unknown User';
      }

      if (emailEl && user?.email) {
        emailEl.textContent = user.email;
      }

      // Update provider badge - check if showProviderBadge is enabled
      const profileContainer = document.querySelector('[id^="auth-profile-"]');
      if (profileContainer && profileContainer.querySelector('.auth-provider-badge')) {
        const providerText = profileEl.querySelector('.auth-provider-text') as HTMLElement | null;
        const googleIcon = profileEl.querySelector('.auth-google-icon') as HTMLElement | null;
        const appleIcon = profileEl.querySelector('.auth-apple-icon') as HTMLElement | null;

        if (providerText) {
          providerText.textContent = user.provider === 'google' ? 'Google' : 'Apple';
        }

        if (googleIcon) {
          googleIcon.classList.toggle('hidden', user.provider !== 'google');
        }

        if (appleIcon) {
          appleIcon.classList.toggle('hidden', user.provider !== 'apple');
        }
      }
    };

    // Handle authentication state changes
    const handleAuthStateChange = (event: string, session?: any) => {
      if (event === 'INITIAL_SESSION' || event === 'SIGNED_IN') {
        if (session?.user) {
          showProfile(session.user);

          // Call success callback if provided
          const successEvent = new CustomEvent('authLoginSuccess', {
            detail: { user: session.user, session },
          });
          container.dispatchEvent(successEvent);
        } else {
          showLogin();
        }
      } else if (event === 'SIGNED_OUT') {
        showLogin();

        // Call logout callback if provided
        const logoutEvent = new CustomEvent('authLogout', { detail: {} });
        container.dispatchEvent(logoutEvent);
      }
    };

    // Handle sign out
    const handleSignOut = async () => {
      try {
        showLoading('signing-out', 'Signing out safely...');
        await signOutAuth();
        // State will be updated by the auth state change listener
      } catch (error) {
        console.error('Sign out error:', error);
        showError('Failed to sign out');
      }
    };

    // Handle error dismissal
    const handleDismissError = () => {
      clearAuthError();
      showLogin();
    };

    // Handle retry
    const handleRetry = () => {
      clearAuthError();
      showLogin();
    };

    // Initialize authentication
    const initAuth = async () => {
      try {
        showLoading('checking-session', 'Checking for existing session...');
        await initializeAuth();
      } catch (error) {
        console.error('Auth initialization error:', error);
        showError('Failed to initialize authentication');
      }
    };

    // Set up event listeners
    const authUnsubscribe = addAuthListener(handleAuthStateChange);

    // Set up UI event listeners
    const retryBtn = container.querySelector('.auth-retry-button');
    const dismissBtn = container.querySelector('.auth-dismiss-error');
    const logoutBtn = container.querySelector('.auth-logout-button');

    if (retryBtn) {
      retryBtn.addEventListener('click', handleRetry);
    }

    if (dismissBtn) {
      dismissBtn.addEventListener('click', handleDismissError);
    }

    if (logoutBtn) {
      logoutBtn.addEventListener('click', handleSignOut);
    }

    // Listen for external auth events (from Google/Apple components)
    const handleGoogleSuccess = (event: any) => {
      console.log('Google sign in success:', event.detail);
    };

    const handleAppleSuccess = (event: any) => {
      console.log('Apple sign in success:', event.detail);
    };

    window.addEventListener('googleSignInSuccess', handleGoogleSuccess);
    window.addEventListener('appleSignInSuccess', handleAppleSuccess);

    // Initialize authentication
    initAuth();

    // Cleanup on unmount
    const cleanup = () => {
      if (authUnsubscribe) {
        authUnsubscribe();
      }

      if (retryBtn) {
        retryBtn.removeEventListener('click', handleRetry);
      }

      if (dismissBtn) {
        dismissBtn.removeEventListener('click', handleDismissError);
      }

      if (logoutBtn) {
        logoutBtn.removeEventListener('click', handleSignOut);
      }

      window.removeEventListener('googleSignInSuccess', handleGoogleSuccess);
      window.removeEventListener('appleSignInSuccess', handleAppleSuccess);
    };

    // Export cleanup for potential external use
    if (typeof window !== 'undefined') {
      window.authContainerCleanup = cleanup;
    }
  });
</script>

<style>
  .auth-container {
    @apply w-full;
    @apply flex items-center;
  }

  /* Dark mode support */
  .dark .auth-loading > div {
    @apply bg-gray-800 border-gray-700;
  }

  .dark .auth-error > div {
    @apply bg-red-900/20 border-red-800;
  }

  .dark .auth-profile > div {
    @apply bg-gray-800 border-gray-700;
  }

  /* Responsive adjustments */
  @media (max-width: 640px) {
    .auth-profile > div {
      @apply flex-col items-start space-y-3;
    }

    .auth-profile .flex.items-center.space-x-2 {
      @apply w-full justify-end;
    }
  }

  /* Animation transitions */
  .auth-container > div {
    @apply transition-all duration-200 ease-in-out;
  }

  /* Focus styles for accessibility */
  .auth-retry-button:focus,
  .auth-dismiss-error:focus,
  .auth-logout-button:focus {
    @apply outline-none ring-2 ring-offset-2 ring-blue-500;
  }

  /* Loading spinner animation */
  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  .animate-spin {
    animation: spin 1s linear infinite;
  }
</style>

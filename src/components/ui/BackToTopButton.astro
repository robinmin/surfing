---
export interface Props {
  class?: string;
}

const { class: className = '' } = Astro.props;
---

<button
  id="back-to-top"
  type="button"
  class={`fixed bottom-8 right-8 z-40 hidden w-12 h-12 bg-primary hover:bg-secondary text-white rounded-full shadow-lg transition-all duration-300 ease-in-out transform hover:scale-110 focus:outline-none focus:ring-4 focus:ring-primary/30 ${className}`}
  aria-label="Back to top"
  title="Back to top"
>
  <svg class="w-6 h-6 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18"></path>
  </svg>
</button>

<script>
  class BackToTop {
    private button: HTMLElement | null;
    private threshold: number;
    private isVisible: boolean = false;

    constructor(threshold: number = 300) {
      this.threshold = threshold;
      this.button = document.getElementById('back-to-top');
      this.init();
    }

    // Expose threshold for external access if needed
    getThreshold(): number {
      return this.threshold;
    }

    private init() {
      if (!this.button) return;

      // Show/hide button based on scroll position
      const handleScroll = () => {
        const scrollY = window.scrollY;
        const shouldShow = scrollY > this.threshold;

        if (shouldShow !== this.isVisible) {
          this.isVisible = shouldShow;
          if (shouldShow) {
            this.show();
          } else {
            this.hide();
          }
        }
      };

      // Smooth scroll to top
      const handleClick = (e: Event) => {
        e.preventDefault();
        window.scrollTo({
          top: 0,
          behavior: 'smooth',
        });
      };

      // Keyboard support
      const handleKeydown = (e: KeyboardEvent) => {
        if (e.key === 'Home' && !e.shiftKey) {
          e.preventDefault();
          window.scrollTo({
            top: 0,
            behavior: 'smooth',
          });
        }
      };

      window.addEventListener('scroll', handleScroll, { passive: true });
      this.button.addEventListener('click', handleClick);
      document.addEventListener('keydown', handleKeydown);

      // Initial check
      handleScroll();
    }

    private show() {
      if (!this.button) return;
      this.button.classList.remove('hidden');
      this.button.classList.add('opacity-100', 'translate-y-0');
      this.button.classList.remove('opacity-0', 'translate-y-4');
    }

    private hide() {
      if (!this.button) return;
      this.button.classList.add('opacity-0', 'translate-y-4');
      this.button.classList.remove('opacity-100', 'translate-y-0');
      setTimeout(() => {
        this.button?.classList.add('hidden');
      }, 300);
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new BackToTop(300));
  } else {
    new BackToTop(300);
  }

  // Re-initialize after Astro page transitions
  document.addEventListener('astro:after-swap', () => {
    setTimeout(() => new BackToTop(300), 100);
  });
</script>

<style>
  #back-to-top {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  #back-to-top.opacity-0 {
    transform: translateY(1rem) scale(0.95);
  }

  #back-to-top.opacity-100 {
    transform: translateY(0) scale(1);
  }

  /* Ensure button is above other content but below modals */
  #back-to-top {
    z-index: 40;
  }

  /* Mobile adjustments */
  @media (max-width: 768px) {
    #back-to-top {
      bottom: 1rem;
      right: 1rem;
      width: 3rem;
      height: 3rem;
    }

    #back-to-top svg {
      width: 1.25rem;
      height: 1.25rem;
    }
  }

  /* Print styles */
  @media print {
    #back-to-top {
      display: none !important;
    }
  }
</style>

---
export interface Props {
  title: string;
  publishDate?: Date;
  updateDate?: Date;
  tags?: string[];
  author?: string;
  description?: string;
  class?: string;
}

const { title, publishDate, updateDate, tags, author, description, class: className = '' } = Astro.props;
---

<header class={`mb-8 ${className}`}>
  <!-- Key Metadata - Prominent but subtle -->
  <div class="flex flex-wrap items-center gap-4 text-sm text-gray-600 dark:text-gray-400 mb-4">
    {
      publishDate && (
        <div class="flex items-center font-medium">
          <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
            />
          </svg>
          <time datetime={publishDate.toISOString()}>
            {publishDate.toLocaleDateString('en-US', {
              year: 'numeric',
              month: 'long',
              day: 'numeric',
            })}
          </time>
        </div>
      )
    }

    {
      updateDate && updateDate.getTime() !== publishDate?.getTime() && (
        <div class="flex items-center text-xs">
          <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
            />
          </svg>
          Updated{' '}
          {updateDate.toLocaleDateString('en-US', {
            month: 'short',
            day: 'numeric',
            year: updateDate.getFullYear() !== publishDate?.getFullYear() ? 'numeric' : undefined,
          })}
        </div>
      )
    }
  </div>

  <!-- Title -->
  <h1 class="font-bold font-heading text-4xl md:text-5xl leading-tighter tracking-tighter mb-4 dark:text-white">
    {title}
  </h1>

  <!-- Description (if provided) -->
  {description && <p class="text-base text-gray-500 dark:text-gray-400 mb-6 leading-relaxed">{description}</p>}

  <!-- Tags -->
  {
    tags && tags.length > 0 && (
      <div class="flex flex-wrap gap-2 mb-6">
        {tags.map((tag) => (
          <span class="inline-flex items-center px-3 py-1 text-sm font-medium bg-blue-50 text-blue-700 dark:bg-blue-900/30 dark:text-blue-300 rounded-full border border-blue-200 dark:border-blue-800">
            <svg class="w-3 h-3 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"
              />
            </svg>
            {tag}
          </span>
        ))}
      </div>
    )
  }

  <!-- Author (if provided) -->
  {
    author && (
      <div class="flex items-center text-sm text-gray-600 dark:text-gray-400 mb-6">
        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
          />
        </svg>
        <span>
          By <span class="font-medium">{author}</span>
        </span>
      </div>
    )
  }
</header>

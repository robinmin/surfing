---
import { t, getCurrentLanguage } from '~/i18n';
import { Icon } from 'astro-icon/components';
import { LANGUAGES } from '~/i18n';

export interface Props {
  // Available translations for this content (e.g., ['en', 'zh', 'ja'])
  // If not provided, all languages are available
  translations?: string[];
  // Whether this is a detail page (for URL-based routing)
  isDetailPage?: boolean;
  // Current collection name (e.g., 'articles', 'documents')
  collectionName?: string;
}

const { translations = Object.keys(LANGUAGES), isDetailPage = false, collectionName = '' } = Astro.props;

// Get current language (for SSG, will be 'en', then updated on client)
const currentLanguage = getCurrentLanguage();
const currentLangInfo = LANGUAGES[currentLanguage];

// Filter available languages based on translations prop
const availableLanguages = Object.entries(LANGUAGES).filter(([code]) => translations.includes(code));
---

<div
  class="language-selector relative"
  data-is-detail-page={isDetailPage}
  data-collection-name={collectionName}
  data-available-translations={JSON.stringify(translations)}
>
  <button
    type="button"
    class="text-muted dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm p-2.5 inline-flex items-center"
    aria-label={t('language.selector')}
    id="language-selector-button"
  >
    <span class="w-5 h-5 flex items-center justify-center text-base" id="current-flag">
      {currentLangInfo.flag}
    </span>
    {availableLanguages.length > 1 && <Icon name="tabler:chevron-down" class="w-3 h-3 ml-1" />}
  </button>

  {
    availableLanguages.length > 1 && (
      <div
        id="language-dropdown"
        class="absolute right-0 top-full mt-1 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg min-w-[60px] z-50 hidden"
      >
        <div class="py-1">
          {availableLanguages.map(([code, info]) => (
            <button
              type="button"
              class="language-option w-full text-center px-3 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center justify-center"
              data-language={code}
            >
              <span class="text-lg">{info.flag}</span>
            </button>
          ))}
        </div>
      </div>
    )
  }

  <!-- Notification for single-language content -->
  <div
    id="language-notification"
    class="absolute right-0 top-full mt-1 bg-gray-800 dark:bg-gray-700 text-white text-xs px-3 py-2 rounded-lg shadow-lg z-50 hidden whitespace-nowrap"
  >
    <!-- Text will be set dynamically client-side -->
  </div>
</div>

<script>
  import {
    getCurrentLanguage,
    setLanguagePreference,
    LANGUAGES,
    toI18nLang,
    toContentLang,
    t,
    type SupportedLanguage,
  } from '~/i18n';

  // Global singleton instance tracker
  const LANGUAGE_SELECTOR_INSTANCE_KEY = '__languageSelectorInstance__';

  class LanguageSelector {
    private button: HTMLElement | null;
    private dropdown: HTMLElement | null;
    private notification: HTMLElement | null;
    private flagElement: HTMLElement | null;
    private container: HTMLElement | null;
    private currentLanguage: SupportedLanguage;
    private isDetailPage: boolean;
    private collectionName: string;
    private availableTranslations: string[];

    constructor() {
      this.button = document.getElementById('language-selector-button');
      this.dropdown = document.getElementById('language-dropdown');
      this.notification = document.getElementById('language-notification');
      this.flagElement = document.getElementById('current-flag');
      this.container = document.querySelector('.language-selector');

      // Read configuration from data attributes
      this.isDetailPage = this.container?.dataset.isDetailPage === 'true';
      this.collectionName = this.container?.dataset.collectionName || '';
      this.availableTranslations = JSON.parse(this.container?.dataset.availableTranslations || '["en","zh","ja"]');

      // Determine current language from URL if on detail page
      this.currentLanguage = this.isDetailPage ? this.getLanguageFromURL() : getCurrentLanguage();

      this.init();
    }

    private getLanguageFromURL(): SupportedLanguage {
      const path = window.location.pathname;
      const pathParts = path.split('/').filter(Boolean);

      // URL pattern: /articles/cn/slug or /articles/en/slug
      if (pathParts.length >= 2 && this.collectionName) {
        const contentLang = pathParts[1]; // e.g., 'cn', 'en', 'jp'
        const i18nLang = toI18nLang(contentLang); // Convert to 'zh', 'en', 'ja'

        // Update localStorage to match URL
        if (i18nLang && Object.keys(LANGUAGES).includes(i18nLang)) {
          setLanguagePreference(i18nLang);
          return i18nLang;
        }
      }

      return getCurrentLanguage();
    }

    private init(): void {
      if (!this.button) return;

      // Update UI to current language
      this.updateUI();

      // If only one language available, show notification on click
      if (this.availableTranslations.length === 1) {
        this.button.addEventListener('click', (e) => {
          e.stopPropagation();
          this.showNotification();
        });
        return;
      }

      // Multiple languages available - show dropdown
      if (!this.dropdown) return;

      // Toggle dropdown on button click
      this.button.addEventListener('click', (e) => {
        e.stopPropagation();
        this.toggleDropdown();
      });

      // Show dropdown on mouse enter
      this.button.addEventListener('mouseenter', () => {
        this.openDropdown();
      });

      // Hide dropdown on mouse leave (with delay to allow moving to dropdown)
      let hideTimeout: number;
      this.button.addEventListener('mouseleave', () => {
        hideTimeout = window.setTimeout(() => {
          if (!this.dropdown?.matches(':hover')) {
            this.closeDropdown();
          }
        }, 100);
      });

      // Keep dropdown open when hovering over it
      this.dropdown?.addEventListener('mouseenter', () => {
        if (hideTimeout) {
          clearTimeout(hideTimeout);
        }
      });

      this.dropdown?.addEventListener('mouseleave', () => {
        this.closeDropdown();
      });

      // Handle language selection
      this.dropdown.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        const languageButton = target.closest('.language-option') as HTMLElement;

        if (languageButton) {
          const newLanguage = languageButton.dataset.language as SupportedLanguage;
          this.changeLanguage(newLanguage);
        }
      });

      // Close dropdown when clicking outside
      document.addEventListener('click', (e) => {
        if (!this.button?.contains(e.target as Node) && !this.dropdown?.contains(e.target as Node)) {
          this.closeDropdown();
        }
      });

      // Keyboard navigation
      this.button.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          this.toggleDropdown();
        }
      });
    }

    private updateUI(): void {
      if (!this.flagElement) return;

      const langInfo = LANGUAGES[this.currentLanguage];
      this.flagElement.textContent = langInfo.flag;

      // Update button aria-label
      if (this.button) {
        this.button.setAttribute('aria-label', `Current language: ${langInfo.nativeName}`);
      }

      // Update notification text with current language
      if (this.notification) {
        this.notification.textContent = t('language.onlyAvailable', this.currentLanguage);
      }

      // Update selected state in dropdown
      const options = this.dropdown?.querySelectorAll('.language-option');
      options?.forEach((option) => {
        const button = option as HTMLElement;
        const isSelected = button.dataset.language === this.currentLanguage;

        button.classList.toggle('bg-gray-100', isSelected);
        button.classList.toggle('dark:bg-gray-700', isSelected);
        button.setAttribute('aria-selected', isSelected.toString());
      });
    }

    private toggleDropdown(): void {
      if (!this.dropdown) return;

      const isVisible = !this.dropdown.classList.contains('hidden');

      if (isVisible) {
        this.closeDropdown();
      } else {
        this.openDropdown();
      }
    }

    private openDropdown(): void {
      if (!this.dropdown) return;

      this.dropdown.classList.remove('hidden');
      this.button?.setAttribute('aria-expanded', 'true');
    }

    private closeDropdown(): void {
      if (!this.dropdown) return;

      this.dropdown.classList.add('hidden');
      this.button?.setAttribute('aria-expanded', 'false');
    }

    private showNotification(): void {
      if (!this.notification) return;

      // Show notification
      this.notification.classList.remove('hidden');

      // Hide after 2 seconds
      setTimeout(() => {
        this.notification?.classList.add('hidden');
      }, 2000);
    }

    private changeLanguage(newLanguage: SupportedLanguage): void {
      if (newLanguage === this.currentLanguage) {
        this.closeDropdown();
        return;
      }

      // Store preference
      setLanguagePreference(newLanguage);

      // If on detail page, redirect to new URL
      if (this.isDetailPage && this.collectionName) {
        const path = window.location.pathname;
        const pathParts = path.split('/').filter(Boolean);

        // URL pattern: /articles/cn/slug -> /articles/en/slug
        if (pathParts.length >= 2) {
          const newContentLang = toContentLang(newLanguage); // Convert 'zh' -> 'cn'
          pathParts[1] = newContentLang; // Replace language code

          const newPath = '/' + pathParts.join('/');
          window.location.href = newPath;
        }
      } else {
        // Not on detail page, just update UI
        this.currentLanguage = newLanguage;
        this.updateUI();
        this.closeDropdown();
      }
    }
  }

  // Initialize with singleton pattern
  function initLanguageSelector() {
    // Check if instance already exists
    if (!(window as any)[LANGUAGE_SELECTOR_INSTANCE_KEY]) {
      (window as any)[LANGUAGE_SELECTOR_INSTANCE_KEY] = new LanguageSelector();
      console.log('[LanguageSelector] Singleton instance created');
    } else {
      console.log('[LanguageSelector] Singleton instance already exists, skipping initialization');
    }
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initLanguageSelector);
  } else {
    initLanguageSelector();
  }

  // Re-initialize after Astro page navigation (View Transitions)
  document.addEventListener('astro:page-load', initLanguageSelector);
</script>

<style>
  .language-selector {
    position: relative;
  }

  .language-option[aria-selected='true'] {
    background-color: rgba(59, 130, 246, 0.1);
  }

  .dark .language-option[aria-selected='true'] {
    background-color: rgba(59, 130, 246, 0.2);
  }

  /* Animation for dropdown */
  #language-dropdown {
    transform-origin: top right;
    transition:
      opacity 0.2s ease,
      transform 0.2s ease;
  }

  #language-dropdown.hidden {
    opacity: 0;
    transform: scale(0.95) translateY(-10px);
    pointer-events: none;
  }

  #language-dropdown:not(.hidden) {
    opacity: 1;
    transform: scale(1) translateY(0);
  }
</style>

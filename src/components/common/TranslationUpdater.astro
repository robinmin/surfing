---
// This component updates content on the client when language changes
---

<script>
  import { t } from '~/i18n';

  class TranslationUpdater {
    constructor() {
      this.updateContent();
      this.setupLanguageListener();
    }

    private setupLanguageListener(): void {
      window.addEventListener('languageChange', (() => {
        this.updateContent();
      }) as EventListener);
    }

    private updateContent(): void {
      // Update page title
      const title = document.title;
      if (title.includes('Surfing')) {
        const siteName = t('site.name');
        const siteDesc = t('site.description');
        document.title = `${siteName} â€” ${siteDesc}`;
      }

      // Update all translatable elements with data-i18n
      this.updateTranslatableElements();
    }

    private updateTranslatableElements(): void {
      const translatableElements = document.querySelectorAll('[data-i18n]');
      translatableElements.forEach((element) => {
        const key = (element as HTMLElement).dataset.i18n;
        if (key) {
          // Check if element has SVG icons that need to be preserved
          const icon = element.querySelector('svg');

          if (icon && (key.startsWith('nav.') || key.includes('explore'))) {
            // Preserve icon for navigation and button elements
            element.innerHTML = `${t(key)} ${icon.outerHTML}`;
          } else {
            // Simple text replacement for most elements
            element.textContent = t(key);
          }
        }
      });

      // Update translatable elements with HTML content (deprecated)
      const translatableHtmlElements = document.querySelectorAll('[data-i18n-html]');
      translatableHtmlElements.forEach((element) => {
        const key = (element as HTMLElement).dataset.i18nHtml;
        if (key) {
          element.innerHTML = t(key);
        }
      });
    }
  }

  // Initialize when DOM is ready
  function initTranslationUpdater() {
    new TranslationUpdater();
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initTranslationUpdater);
  } else {
    initTranslationUpdater();
  }

  // Re-initialize after Astro page navigation (View Transitions)
  document.addEventListener('astro:page-load', initTranslationUpdater);
</script>

---
// This component updates content on the client when language changes
---

<script>
  import { getCurrentLanguage, t, LANGUAGES } from '~/i18n';

  class TranslationUpdater {
    private currentLanguage = getCurrentLanguage();

    constructor() {
      this.updateContent();
      this.setupLanguageListener();
    }

    private setupLanguageListener(): void {
      window.addEventListener('languageChange', ((e: CustomEvent) => {
        this.currentLanguage = e.detail.language;
        this.updateContent();
      }) as EventListener);
    }

    private updateContent(): void {
      // Update page title
      const title = document.title;
      if (title.includes('Surfing')) {
        const siteName = t('site.name');
        const siteDesc = t('site.description');
        document.title = `${siteName} â€” ${siteDesc}`;
      }

      // Update navigation items
      this.updateNavigation();
      
      // Update main content
      this.updateMainContent();
    }

    private updateNavigation(): void {
      // Update dropdown menu items with specific nav keys
      const dropdownLinks = document.querySelectorAll('[data-nav-key]');
      dropdownLinks.forEach((link) => {
        const navKey = (link as HTMLElement).dataset.navKey;
        if (navKey) {
          link.textContent = t(navKey);
        }
      });

      // Update main navigation links
      const mainNavLinks = document.querySelectorAll('.main-nav-item[data-nav-key]');
      mainNavLinks.forEach((link) => {
        const navKey = (link as HTMLElement).dataset.navKey;
        if (navKey) {
          // For main nav items, we need to preserve the dropdown arrow
          const chevronIcon = link.querySelector('svg');
          if (chevronIcon) {
            link.innerHTML = `${t(navKey)} ${chevronIcon.outerHTML}`;
          } else {
            link.textContent = t(navKey);
          }
        }
      });
    }

    private updateMainContent(): void {
      // Update translatable elements
      const translatableElements = document.querySelectorAll('[data-i18n]');
      translatableElements.forEach((element) => {
        const key = (element as HTMLElement).dataset.i18n;
        if (key) {
          element.textContent = t(key);
        }
      });

      // Update translatable elements with HTML content
      const translatableHtmlElements = document.querySelectorAll('[data-i18n-html]');
      translatableHtmlElements.forEach((element) => {
        const key = (element as HTMLElement).dataset.i18nHtml;
        if (key) {
          element.innerHTML = t(key);
        }
      });
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new TranslationUpdater();
    });
  } else {
    new TranslationUpdater();
  }
</script>
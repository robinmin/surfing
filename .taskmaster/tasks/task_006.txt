# Task ID: 6
# Title: Create Sign In with Apple Component
# Status: done
# Dependencies: 3
# Priority: high
# Description: Implement Sign In with Apple authentication component
# Details:
Create src/components/auth/AppleSignIn.astro component that implements Apple authentication. Include: 1) Loading Apple Sign In JS library, 2) Initializing AppleID.auth with Services ID and redirect URI, 3) Success/failure event handlers, 4) Integration with Supabase signInWithIdToken method, 5) Proper error handling and user feedback. Use client:load directive for proper hydration.

# Test Strategy:
Test authentication flow, verify ID token validation through Supabase, and ensure proper error handling

# Subtasks:
## 1. Create Apple Sign In Script Loader [done]
### Dependencies: None
### Description: Create a utility function to dynamically load the Apple Sign In JavaScript library and ensure it's only loaded once
### Details:
Create src/lib/apple-auth.ts that exports a function to load Apple's AppleID.auth JavaScript library. The function should check if AppleID is already available globally, and if not, dynamically create and append a script tag with src='https://appleid.cdn-apple.com/appleauth/static/jsapi/appleid/1/en_US/appleid.auth.js'. Return a Promise that resolves when the script loads or rejects on error. Include proper TypeScript types for the AppleID global object.

## 2. Create Apple Sign In Configuration Module [done]
### Dependencies: 6.1
### Description: Create configuration utilities for Apple Sign In with environment variable handling
### Details:
Extend src/lib/apple-auth.ts with configuration functions. Create an interface for Apple Sign In config including Services ID, redirect URI, and scope. Add a function that reads PUBLIC_APPLE_SERVICES_ID and PUBLIC_APPLE_REDIRECT_URI from import.meta.env and validates they exist. Include error handling for missing environment variables. Export configuration object with proper TypeScript types.

## 3. Implement Apple Authentication Core Logic [done]
### Dependencies: 6.2
### Description: Create the core Apple authentication logic with AppleID.auth initialization and event handling
### Details:
Add Apple authentication functions to src/lib/apple-auth.ts. Create initializeAppleAuth function that calls AppleID.auth.init with the configuration from step 2. Implement handleAppleSignIn function that calls AppleID.auth.signIn and returns a Promise resolving to the authorization object. Include proper error handling for authentication failures and network issues. Add TypeScript interfaces for Apple's response objects.

## 4. Integrate Apple Auth with Supabase [done]
### Dependencies: 6.3
### Description: Create integration layer between Apple authentication and Supabase signInWithIdToken
### Details:
Add Supabase integration functions to src/lib/apple-auth.ts. Create signInWithApple function that combines Apple authentication with Supabase's signInWithIdToken method. Extract the identity token from Apple's authorization response and pass it to Supabase. Include error handling for both Apple authentication failures and Supabase errors. Return user session data on success.

## 5. Create AppleSignIn Astro Component [done]
### Dependencies: 6.4
### Description: Create the AppleSignIn.astro component with proper client-side hydration and UI
### Details:
Create src/components/auth/AppleSignIn.astro component using client:load directive. Import apple-auth functions and create component script that initializes Apple auth on mount. Include Apple Sign In button following Apple's design guidelines with proper styling. Add loading states, error handling, and success feedback. Use the existing Button component patterns from src/components/ui/Button.astro for consistent styling. Include proper accessibility attributes.


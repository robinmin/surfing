{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Install Supabase JavaScript Client",
        "description": "Install @supabase/supabase-js package to enable authentication functionality",
        "details": "Install the Supabase JavaScript client library using npm. Run 'npm install @supabase/supabase-js' to add the package to dependencies. Verify the installation by checking package.json for the added dependency. This package provides the client-side SDK for interacting with Supabase Auth services.",
        "testStrategy": "Verify package appears in package.json dependencies and can be imported without errors in TypeScript/JavaScript files",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Install Supabase JavaScript Client Package",
            "description": "Install the @supabase/supabase-js package as a dependency to enable authentication functionality in the Astro project",
            "dependencies": [],
            "details": "Run 'npm install @supabase/supabase-js' in the project root directory. This will add the Supabase JavaScript client to the dependencies section of package.json. The package provides the client-side SDK for interacting with Supabase Auth services and will be used for authentication, session management, and OAuth provider integration.",
            "status": "done",
            "testStrategy": "Verify the package appears in package.json dependencies and can be imported without errors in TypeScript/JavaScript files. Test import with 'import { createClient } from '@supabase/supabase-js'' in a test file."
          },
          {
            "id": 2,
            "title": "Create Environment Configuration Template",
            "description": "Create .env.example file with required Supabase and OAuth provider environment variables",
            "dependencies": ["1.1"],
            "details": "Create .env.example file in project root with variables: PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, PUBLIC_GOOGLE_CLIENT_ID, PUBLIC_APPLE_SERVICES_ID, PUBLIC_APPLE_REDIRECT_URI. Use 'PUBLIC_' prefix to make variables available client-side in Astro. Include comments explaining each variable's purpose and where to obtain the values.",
            "status": "done",
            "testStrategy": "Verify .env.example file exists with all required variables properly commented. Test that variables can be accessed via import.meta.env in Astro components when .env file is created from template."
          },
          {
            "id": 3,
            "title": "Create Supabase Client Configuration",
            "description": "Create a centralized Supabase client configuration module to initialize and export the client instance",
            "dependencies": ["1.1", "1.2"],
            "details": "Create src/lib/supabase.ts file to initialize Supabase client using environment variables. Export createClient instance configured with PUBLIC_SUPABASE_URL and PUBLIC_SUPABASE_ANON_KEY. Include TypeScript types and error handling for missing environment variables. This module will be imported throughout the application for authentication operations.",
            "status": "done",
            "testStrategy": "Verify the client can be imported and initialized without errors. Test environment variable loading and ensure proper error messages when variables are missing."
          },
          {
            "id": 4,
            "title": "Verify Package Installation and Dependencies",
            "description": "Run build and type checking to ensure the Supabase package is properly installed and configured",
            "dependencies": ["1.1", "1.2", "1.3"],
            "details": "Execute 'npm run check' to run Astro check, ESLint, and Prettier validation. Run 'npm run build' to ensure the Supabase package doesn't introduce any build errors. Check TypeScript compilation for the Supabase client configuration. Resolve any package conflicts or type errors that may arise.",
            "status": "done",
            "testStrategy": "Verify all checks pass without errors. Confirm the build completes successfully and the Supabase types are properly recognized by TypeScript. Test import statements in development mode."
          },
          {
            "id": 5,
            "title": "Document Installation and Setup Process",
            "description": "Update project documentation to include Supabase setup instructions and environment variable configuration",
            "dependencies": ["1.1", "1.2", "1.3", "1.4"],
            "details": "Add setup instructions to existing documentation explaining how to install Supabase, configure environment variables, and obtain necessary API keys. Include steps for local development, GitHub Actions secrets, and Cloudflare Pages environment variable configuration. Document the authentication flow architecture and client usage patterns.",
            "status": "done",
            "testStrategy": "Verify documentation is clear and complete. Test setup instructions on a fresh environment to ensure all steps work correctly and no dependencies are missing."
          }
        ]
      },
      {
        "id": 2,
        "title": "Setup Environment Configuration",
        "description": "Configure environment variables for Supabase and OAuth providers across all environments",
        "details": "Update .env.example with required variables: PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, PUBLIC_GOOGLE_CLIENT_ID, PUBLIC_APPLE_SERVICES_ID, PUBLIC_APPLE_REDIRECT_URI. These variables need 'PUBLIC_' prefix to be available client-side in Astro. Create comprehensive documentation for setting up these variables in local (.env), GitHub Actions (secrets), and Cloudflare Pages (environment variables) environments.",
        "testStrategy": "Verify environment variables are properly loaded in development and can be accessed via import.meta.env in Astro components",
        "priority": "high",
        "dependencies": [1],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Create Supabase Client Initialization Module",
        "description": "Create a centralized module for initializing and configuring the Supabase client",
        "details": "Create src/lib/supabase.ts that exports a configured Supabase client instance. Use import.meta.env.PUBLIC_SUPABASE_URL and import.meta.env.PUBLIC_SUPABASE_ANON_KEY for configuration. Include proper TypeScript types and error handling for missing environment variables. This module will be the single source of truth for Supabase client configuration across the application.",
        "testStrategy": "Verify the module exports a working Supabase client and throws appropriate errors when environment variables are missing",
        "priority": "high",
        "dependencies": [1, 2],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create src/lib directory structure",
            "description": "Create the lib directory structure under src to house the Supabase client initialization module",
            "dependencies": [],
            "details": "Create the src/lib directory if it doesn't exist. This follows Astro project conventions for utility libraries and shared modules.",
            "status": "done",
            "testStrategy": "Verify the directory exists and can be imported from other modules"
          },
          {
            "id": 2,
            "title": "Define TypeScript types for Supabase configuration",
            "description": "Create type definitions for environment variables and Supabase client configuration to ensure type safety",
            "dependencies": ["3.1"],
            "details": "Add type definitions to src/types.d.ts or create a dedicated types file for Supabase-related interfaces. Define types for environment variables (PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY) and any custom configuration options.",
            "status": "done",
            "testStrategy": "Verify TypeScript compilation passes with proper type checking"
          },
          {
            "id": 3,
            "title": "Implement environment variable validation",
            "description": "Create validation logic to check for required environment variables and provide meaningful error messages",
            "dependencies": ["3.1", "3.2"],
            "details": "Implement validation functions that check for the presence of PUBLIC_SUPABASE_URL and PUBLIC_SUPABASE_ANON_KEY using import.meta.env. Throw descriptive errors if variables are missing or invalid. Follow the pattern used in src/utils/directories.ts for environment variable access.",
            "status": "done",
            "testStrategy": "Test with missing environment variables to ensure proper error handling"
          },
          {
            "id": 4,
            "title": "Create Supabase client initialization function",
            "description": "Implement the core Supabase client creation and configuration logic",
            "dependencies": ["3.2", "3.3"],
            "details": "Create the main function that initializes the Supabase client using the validated environment variables. Import and use the official Supabase JavaScript client library. Configure any necessary client options and ensure proper error handling.",
            "status": "done",
            "testStrategy": "Verify the client is properly initialized and can make basic API calls"
          },
          {
            "id": 5,
            "title": "Export configured client instance and create module interface",
            "description": "Create the final module exports and ensure proper module structure for consumption by other parts of the application",
            "dependencies": ["3.3", "3.4"],
            "details": "Export the configured Supabase client instance as the default export from src/lib/supabase.ts. Ensure the module can be imported using ES6 imports and follows TypeScript best practices. Add JSDoc comments for better developer experience.",
            "status": "done",
            "testStrategy": "Test imports from different parts of the application and verify the client instance works correctly"
          }
        ]
      },
      {
        "id": 4,
        "title": "Implement SHA-256 Hashing Utility",
        "description": "Create utility function for SHA-256 hashing required for Google One Tap nonce verification",
        "details": "Create src/utils/crypto.ts with sha256Hash function that uses Web Crypto API to generate SHA-256 hashes. This is required for Google One Tap nonce verification where the raw nonce is sent to Supabase but a hashed version is sent to Google. Include proper error handling and browser compatibility checks.",
        "testStrategy": "Test function with known input/output pairs to verify correct SHA-256 hash generation",
        "priority": "medium",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Create Google One Tap Authentication Component",
        "description": "Implement Google One Tap sign-in component with nonce verification",
        "details": "Create src/components/auth/GoogleOneTap.astro component that implements Google One Tap authentication. Include: 1) Dynamic loading of Google Identity Services library, 2) Nonce generation and SHA-256 hashing, 3) Google One Tap initialization with proper configuration, 4) Callback handler that verifies nonce and calls Supabase signInWithIdToken, 5) Error handling and loading states. Use client:load directive for Astro hydration.",
        "testStrategy": "Test successful authentication flow, nonce verification, error handling for invalid tokens, and proper Supabase session creation",
        "priority": "high",
        "dependencies": [3, 4],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Create Sign In with Apple Component",
        "description": "Implement Sign In with Apple authentication component",
        "details": "Create src/components/auth/AppleSignIn.astro component that implements Apple authentication. Include: 1) Loading Apple Sign In JS library, 2) Initializing AppleID.auth with Services ID and redirect URI, 3) Success/failure event handlers, 4) Integration with Supabase signInWithIdToken method, 5) Proper error handling and user feedback. Use client:load directive for proper hydration.",
        "testStrategy": "Test authentication flow, verify ID token validation through Supabase, and ensure proper error handling",
        "priority": "high",
        "dependencies": [3],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Apple Sign In Script Loader",
            "description": "Create a utility function to dynamically load the Apple Sign In JavaScript library and ensure it's only loaded once",
            "dependencies": [],
            "details": "Create src/lib/apple-auth.ts that exports a function to load Apple's AppleID.auth JavaScript library. The function should check if AppleID is already available globally, and if not, dynamically create and append a script tag with src='https://appleid.cdn-apple.com/appleauth/static/jsapi/appleid/1/en_US/appleid.auth.js'. Return a Promise that resolves when the script loads or rejects on error. Include proper TypeScript types for the AppleID global object.",
            "status": "done",
            "testStrategy": "Verify the script loads correctly and AppleID object becomes available globally"
          },
          {
            "id": 2,
            "title": "Create Apple Sign In Configuration Module",
            "description": "Create configuration utilities for Apple Sign In with environment variable handling",
            "dependencies": ["6.1"],
            "details": "Extend src/lib/apple-auth.ts with configuration functions. Create an interface for Apple Sign In config including Services ID, redirect URI, and scope. Add a function that reads PUBLIC_APPLE_SERVICES_ID and PUBLIC_APPLE_REDIRECT_URI from import.meta.env and validates they exist. Include error handling for missing environment variables. Export configuration object with proper TypeScript types.",
            "status": "done",
            "testStrategy": "Verify configuration reads environment variables correctly and throws appropriate errors when variables are missing"
          },
          {
            "id": 3,
            "title": "Implement Apple Authentication Core Logic",
            "description": "Create the core Apple authentication logic with AppleID.auth initialization and event handling",
            "dependencies": ["6.2"],
            "details": "Add Apple authentication functions to src/lib/apple-auth.ts. Create initializeAppleAuth function that calls AppleID.auth.init with the configuration from step 2. Implement handleAppleSignIn function that calls AppleID.auth.signIn and returns a Promise resolving to the authorization object. Include proper error handling for authentication failures and network issues. Add TypeScript interfaces for Apple's response objects.",
            "status": "done",
            "testStrategy": "Test authentication initialization and sign-in flow, verify proper error handling for various failure scenarios"
          },
          {
            "id": 4,
            "title": "Integrate Apple Auth with Supabase",
            "description": "Create integration layer between Apple authentication and Supabase signInWithIdToken",
            "dependencies": ["6.3"],
            "details": "Add Supabase integration functions to src/lib/apple-auth.ts. Create signInWithApple function that combines Apple authentication with Supabase's signInWithIdToken method. Extract the identity token from Apple's authorization response and pass it to Supabase. Include error handling for both Apple authentication failures and Supabase errors. Return user session data on success.",
            "status": "done",
            "testStrategy": "Test complete authentication flow from Apple Sign In through Supabase token validation, verify proper error handling and session creation"
          },
          {
            "id": 5,
            "title": "Create AppleSignIn Astro Component",
            "description": "Create the AppleSignIn.astro component with proper client-side hydration and UI",
            "dependencies": ["6.4"],
            "details": "Create src/components/auth/AppleSignIn.astro component using client:load directive. Import apple-auth functions and create component script that initializes Apple auth on mount. Include Apple Sign In button following Apple's design guidelines with proper styling. Add loading states, error handling, and success feedback. Use the existing Button component patterns from src/components/ui/Button.astro for consistent styling. Include proper accessibility attributes.",
            "status": "done",
            "testStrategy": "Test component renders correctly, button triggers authentication flow, loading and error states display properly, and component integrates with existing design system"
          }
        ]
      },
      {
        "id": 7,
        "title": "Implement Authentication State Management",
        "description": "Create centralized authentication state management and session handling",
        "details": "Create src/lib/auth.ts with authentication state management including: 1) onAuthStateChange listener setup, 2) User session state management, 3) Authentication event handlers, 4) Session persistence and refresh logic, 5) Logout functionality. Export reactive auth state that can be used across components. Include TypeScript types for user and session objects.",
        "testStrategy": "Test session persistence across page refreshes, proper state updates on login/logout, and automatic token refresh",
        "priority": "high",
        "dependencies": [3],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Create Authentication UI Container Component",
        "description": "Create main authentication UI component that handles login/logout states",
        "details": "Create src/components/auth/AuthContainer.astro that serves as the main authentication UI. Include: 1) Conditional rendering based on auth state, 2) Login buttons container (Google One Tap + Apple Sign In), 3) User profile container with avatar and logout button, 4) Loading states and error messages, 5) Responsive design for mobile/desktop. Use client:load directive and integrate with auth state management.",
        "testStrategy": "Test UI state transitions, responsive design, accessibility features, and proper integration with authentication flow",
        "priority": "high",
        "dependencies": [5, 6, 7],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create AuthContainer component structure and props interface",
            "description": "Create the main AuthContainer.astro file with TypeScript interfaces and basic component structure",
            "dependencies": [],
            "details": "Create src/components/auth/AuthContainer.astro with proper TypeScript interfaces for props. Define interfaces for user state, loading states, and error handling. Set up the basic Astro component structure with client:load directive. Include props for controlling authentication state visibility, styling classes, and callback functions.",
            "status": "done",
            "testStrategy": "Verify component imports correctly and renders without errors in development environment"
          },
          {
            "id": 2,
            "title": "Implement conditional rendering logic based on authentication state",
            "description": "Add state management and conditional rendering for authenticated vs unauthenticated states",
            "dependencies": ["8.1"],
            "details": "Implement reactive state management using Astro's client-side capabilities. Create conditional rendering logic to show different UI components based on authentication status (loading, authenticated, unauthenticated, error states). Use reactive variables and proper state transitions following Astro patterns observed in existing components like ToggleTheme.",
            "status": "done",
            "testStrategy": "Test state transitions between different authentication states and verify proper conditional rendering"
          },
          {
            "id": 3,
            "title": "Create login buttons container with Google One Tap and Apple Sign In",
            "description": "Implement the login interface with authentication provider buttons",
            "dependencies": ["8.2"],
            "details": "Create a login buttons container that displays when user is not authenticated. Include Google One Tap integration and Apple Sign In button following the existing Button component patterns found in Button.astro. Use proper styling classes consistent with the project's Tailwind CSS approach and button variants (primary, secondary, etc). Implement proper accessibility attributes and responsive design.",
            "status": "done",
            "testStrategy": "Verify buttons render correctly on different screen sizes and have proper accessibility attributes"
          },
          {
            "id": 4,
            "title": "Build user profile container with avatar and logout functionality",
            "description": "Create the authenticated user interface showing profile information and logout option",
            "dependencies": ["8.2"],
            "details": "Build a user profile container that displays when user is authenticated. Include user avatar image, display name, and logout button. Follow the existing component patterns from Header.astro for navigation elements and Button.astro for action buttons. Implement proper user data handling and logout functionality. Use responsive design patterns consistent with the existing Header component.",
            "status": "done",
            "testStrategy": "Test user profile display with different user data scenarios and verify logout functionality"
          },
          {
            "id": 5,
            "title": "Add responsive design and integrate with project styling system",
            "description": "Implement responsive design and ensure consistent styling with the existing design system",
            "dependencies": ["8.3", "8.4"],
            "details": "Apply responsive design using Tailwind CSS classes following patterns from existing components like Header.astro. Ensure proper mobile/desktop layouts, implement loading states with appropriate spinners or skeleton UI, and add error message display. Integrate with the project's dark/light theme system and ensure accessibility compliance. Add proper focus management and keyboard navigation support.",
            "status": "done",
            "testStrategy": "Test responsive behavior across different screen sizes, verify theme switching works correctly, and validate accessibility with screen readers"
          }
        ]
      },
      {
        "id": 9,
        "title": "Integrate Authentication into Site Header",
        "description": "Add authentication component to the existing site header navigation",
        "details": "Modify src/components/widgets/Header.astro to include the AuthContainer component in the top-right area. Position it alongside existing elements (theme toggle, language selector, RSS feed). Ensure proper spacing, alignment, and responsive behavior. The authentication UI should be non-intrusive and not interfere with existing navigation functionality.",
        "testStrategy": "Test header layout on different screen sizes, verify authentication UI integrates well with existing elements, and ensure no layout conflicts",
        "priority": "high",
        "dependencies": [8],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Configure Google Cloud Platform OAuth",
        "description": "Set up Google OAuth 2.0 Client ID and configure authorized origins",
        "details": "In Google Cloud Console: 1) Create/configure OAuth 2.0 Client ID, 2) Set up OAuth consent screen, 3) Add authorized JavaScript origins for all environments (http://localhost:4321, https://surfing.salty.vip, https://*.pages.dev), 4) Configure authorized redirect URIs if needed. Document the setup process and required configurations for different environments.",
        "testStrategy": "Verify OAuth flow works from all configured origins and Google validates the client ID correctly",
        "priority": "medium",
        "dependencies": [2],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Configure Apple Developer Portal Setup",
        "description": "Set up Apple Sign In configuration in Apple Developer Portal",
        "details": "In Apple Developer Portal: 1) Create App ID with Sign in with Apple capability, 2) Create Services ID (used as Client ID), 3) Configure domains and return URLs for all environments (surfing.salty.vip, *.pages.dev), 4) Set up return URL: https://surfing.salty.vip/auth/callback. Document the configuration process and required settings.",
        "testStrategy": "Verify Apple Sign In flow works correctly and tokens are properly validated",
        "priority": "medium",
        "dependencies": [2],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create App ID with Sign in with Apple capability",
            "description": "Navigate to Apple Developer Portal and create a new App ID (bundle identifier) with Sign in with Apple capability enabled for the Surfing application",
            "dependencies": [],
            "details": "In Apple Developer Portal: 1) Go to Certificates, Identifiers & Profiles > Identifiers, 2) Click '+' to create new App ID, 3) Select 'App IDs' type, 4) Choose 'App' platform, 5) Enter Bundle ID (e.g., vip.salty.surfing), 6) Add App Name and description, 7) Enable 'Sign in with Apple' capability from the capabilities list, 8) Review and register the App ID. Document the Bundle ID as it will be needed for Services ID configuration.",
            "status": "pending",
            "testStrategy": "Verify the App ID appears in the identifiers list with Sign in with Apple capability marked as 'Enabled'"
          },
          {
            "id": 2,
            "title": "Create Services ID for OAuth Client ID",
            "description": "Create a Services ID in Apple Developer Portal that will serve as the OAuth Client ID for web-based Sign in with Apple authentication",
            "dependencies": ["11.1"],
            "details": "In Apple Developer Portal: 1) Go to Certificates, Identifiers & Profiles > Identifiers, 2) Click '+' to create new identifier, 3) Select 'Services IDs' type, 4) Enter unique Services ID identifier (e.g., vip.salty.surfing.web), 5) Add description, 6) Enable 'Sign in with Apple' capability, 7) Click 'Configure' next to Sign in with Apple, 8) Select the App ID created in previous step as Primary App ID, 9) Save the Services ID. Document this Services ID as it becomes the CLIENT_ID for Supabase configuration.",
            "status": "pending",
            "testStrategy": "Confirm Services ID is created and linked to the correct App ID, and that it appears in the Services IDs list"
          },
          {
            "id": 3,
            "title": "Configure domains and return URLs for all environments",
            "description": "Configure authorized domains and return URLs in the Services ID to support local development, Cloudflare preview deployments, and production environment",
            "dependencies": ["11.2"],
            "details": "In Apple Developer Portal Services ID configuration: 1) Click 'Configure' on the Services ID created earlier, 2) Under 'Website URLs', add primary domain: surfing.salty.vip, 3) Add additional domains for development and preview: localhost (for local dev), *.pages.dev (for Cloudflare previews), 4) Under 'Return URLs', add the primary callback URL: https://surfing.salty.vip/auth/callback, 5) Add additional return URLs for other environments: http://localhost:4321/auth/callback, https://*.pages.dev/auth/callback, 6) Save the configuration. This ensures Apple Sign In works across all deployment environments.",
            "status": "pending",
            "testStrategy": "Verify all domains and return URLs are properly saved in the Services ID configuration and that no validation errors appear"
          },
          {
            "id": 4,
            "title": "Generate and download Apple Sign In private key",
            "description": "Create and download the private key required for Apple Sign In server-to-server communication and token validation",
            "dependencies": ["11.3"],
            "details": "In Apple Developer Portal: 1) Go to Certificates, Identifiers & Profiles > Keys, 2) Click '+' to create new key, 3) Enter key name (e.g., 'Surfing Apple Sign In Key'), 4) Enable 'Sign in with Apple' capability, 5) Click 'Configure' and select the App ID created earlier, 6) Click 'Continue' and 'Register', 7) Download the .p8 private key file immediately (this is the only chance to download), 8) Note the Key ID displayed on the confirmation page, 9) Also note the Team ID from the top-right corner of the portal. Store these securely as they are required for Supabase Apple provider configuration.",
            "status": "pending",
            "testStrategy": "Confirm the private key file is downloaded successfully and that Key ID and Team ID are documented for later use"
          },
          {
            "id": 5,
            "title": "Document Apple Developer Portal configuration process",
            "description": "Create comprehensive documentation of the Apple Developer Portal setup process including all configuration values and settings required for integration",
            "dependencies": ["11.4"],
            "details": "Create documentation that includes: 1) Step-by-step instructions for recreating the Apple Developer Portal setup, 2) All configuration values: App ID Bundle Identifier, Services ID, Key ID, Team ID, 3) List of authorized domains and return URLs for each environment, 4) Screenshots or descriptions of key configuration screens, 5) Troubleshooting section for common issues, 6) Security notes about private key storage and rotation, 7) Integration notes for Supabase configuration (what values go where). Save this documentation in a secure location accessible to the development team.",
            "status": "pending",
            "testStrategy": "Review documentation with team member to ensure all steps are clear and complete, and that all required values are properly documented"
          }
        ]
      },
      {
        "id": 12,
        "title": "Configure Supabase Authentication Providers",
        "description": "Enable and configure Google and Apple providers in Supabase dashboard",
        "details": "In Supabase dashboard: 1) Enable Google provider and add Client ID to 'Authorized Client IDs', 2) Enable Apple provider and add Services ID to 'Authorized Client IDs', 3) Configure ID Token flow settings, 4) Set up Site URL and redirect URLs for all environments (wildcards for preview environments), 5) Configure CORS settings for all origins.",
        "testStrategy": "Test ID token validation from both providers through Supabase Auth and verify CORS settings work for all environments",
        "priority": "medium",
        "dependencies": [10, 11],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Enable Google OAuth Provider in Supabase Dashboard",
            "description": "Access Supabase dashboard and enable Google provider with proper configuration for ID token flow",
            "dependencies": [],
            "details": "In Supabase dashboard: 1) Navigate to Authentication > Providers, 2) Enable Google provider, 3) Configure for ID Token flow by selecting 'Use an ID token instead of a secret', 4) Add Google Client ID from task 10 to 'Authorized Client IDs' list, 5) Ensure proper nonce validation is enabled. This enables Supabase to validate Google ID tokens without requiring OAuth redirect flow.",
            "status": "pending",
            "testStrategy": "Verify Google provider shows as enabled in Supabase dashboard and ID token configuration is set correctly"
          },
          {
            "id": 2,
            "title": "Enable Apple OAuth Provider in Supabase Dashboard",
            "description": "Access Supabase dashboard and enable Apple provider with proper configuration for client-side authentication",
            "dependencies": [],
            "details": "In Supabase dashboard: 1) Navigate to Authentication > Providers, 2) Enable Apple provider, 3) Add Apple Services ID from task 11 to 'Authorized Client IDs' list, 4) Configure for client-side flow (no private key required), 5) Verify provider settings match Apple Developer Portal configuration. This enables Supabase to validate Apple ID tokens from client-side Sign In with Apple flow.",
            "status": "pending",
            "testStrategy": "Verify Apple provider shows as enabled in Supabase dashboard and Services ID is properly configured"
          },
          {
            "id": 3,
            "title": "Configure Site URL and Redirect URLs for All Environments",
            "description": "Set up comprehensive URL configuration in Supabase to support local development, preview deployments, and production",
            "dependencies": ["12.1", "12.2"],
            "details": "In Supabase dashboard Authentication settings: 1) Set Site URL to production domain (https://surfing.salty.vip), 2) Add Additional Redirect URLs: http://localhost:4321/**, https://*.pages.dev/**, https://surfing.salty.vip/**, 3) Use wildcard patterns to support Cloudflare Pages preview environments, 4) Ensure all environment URLs from tasks 10 and 11 are covered. This ensures authentication callbacks work across all deployment environments.",
            "status": "pending",
            "testStrategy": "Test authentication redirect flows from local development, Cloudflare preview deployments, and production domain"
          },
          {
            "id": 4,
            "title": "Configure CORS Settings for Cross-Origin Requests",
            "description": "Set up CORS configuration in Supabase to allow authentication requests from all deployment environments",
            "dependencies": ["12.3"],
            "details": "In Supabase dashboard API settings: 1) Navigate to Settings > API, 2) Add CORS origins: http://localhost:4321, https://surfing.salty.vip, https://*.pages.dev, 3) Ensure wildcard patterns are properly configured for Cloudflare Pages, 4) Test CORS headers allow authentication API calls from all environments. This prevents CORS blocking during authentication flows across different domains.",
            "status": "pending",
            "testStrategy": "Verify CORS preflight requests succeed from all configured origins using browser developer tools"
          },
          {
            "id": 5,
            "title": "Document Supabase Configuration and Environment Variables",
            "description": "Create documentation for Supabase setup process and required environment variables for the authentication system",
            "dependencies": ["12.4"],
            "details": "Create comprehensive documentation: 1) Document all Supabase dashboard configuration steps, 2) Update .env.example with PUBLIC_SUPABASE_URL and PUBLIC_SUPABASE_ANON_KEY variables, 3) Document provider-specific configuration requirements, 4) Create troubleshooting guide for common CORS and redirect URL issues, 5) Document environment-specific setup for local, preview, and production. This ensures consistent setup across different environments and team members.",
            "status": "pending",
            "testStrategy": "Follow documentation to verify a fresh Supabase project can be configured correctly for multi-environment authentication"
          }
        ]
      },
      {
        "id": 13,
        "title": "Implement Multi-Environment URL Configuration",
        "description": "Configure authentication to work across local, preview, and production environments",
        "details": "Configure Supabase with: 1) Primary Site URL set to production domain (https://surfing.salty.vip), 2) Wildcard patterns for preview environments (http://localhost:4321/**, https://*.pages.dev/**, https://surfing.salty.vip/**), 3) Update OAuth provider settings to include all environment URLs, 4) Ensure environment variables are correctly set in all deployment contexts.",
        "testStrategy": "Test authentication flow in local development, Cloudflare preview deployments, and production environment",
        "priority": "medium",
        "dependencies": [12],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Configure Supabase Project Authentication URLs",
            "description": "Set up Supabase project authentication configuration for multi-environment support",
            "dependencies": [],
            "details": "Access Supabase dashboard > Authentication > URL configuration. Set Primary Site URL to https://surfing.salty.vip. Add redirect URLs for all environments: http://localhost:4321/**, https://*.pages.dev/**, https://surfing.salty.vip/**. Configure wildcard patterns to support preview environments and localhost development. Ensure OAuth provider callback URLs are updated to include all environment URLs.",
            "status": "pending",
            "testStrategy": "Verify authentication redirects work in all environments by testing sign-in flows from localhost, Cloudflare preview deployments, and production"
          },
          {
            "id": 2,
            "title": "Update Environment Variable Configuration Files",
            "description": "Ensure environment variables are properly configured for different deployment contexts",
            "dependencies": ["13.1"],
            "details": "Update .env.example with comprehensive environment-specific documentation. Verify that PUBLIC_SUPABASE_URL and PUBLIC_SUPABASE_ANON_KEY are correctly referenced in src/lib/supabase.ts. Ensure environment variables work correctly in Astro's import.meta.env context for both development and production builds. Document deployment-specific variable setup for Cloudflare Pages and local development.",
            "status": "pending",
            "testStrategy": "Test environment variable loading in development, build process, and verify proper configuration detection using the isSupabaseConfigured helper function"
          },
          {
            "id": 3,
            "title": "Configure OAuth Provider Settings for Multi-Environment",
            "description": "Update Google OAuth and Apple Sign In configurations to support all deployment environments",
            "dependencies": ["13.1"],
            "details": "Update Google Cloud Console OAuth 2.0 Client ID configuration to include authorized redirect URIs for all environments: http://localhost:4321/auth/callback, https://*.pages.dev/auth/callback, https://surfing.salty.vip/auth/callback. Configure Apple Developer Portal Services ID with return URLs for all environments. Update PUBLIC_GOOGLE_CLIENT_ID and PUBLIC_APPLE_SERVICES_ID environment variables. Ensure callback URLs match across Supabase and OAuth provider configurations.",
            "status": "pending",
            "testStrategy": "Test OAuth flows from each environment type, verify callback URLs resolve correctly, and confirm no CORS or redirect mismatch errors"
          },
          {
            "id": 4,
            "title": "Implement Environment Detection and Configuration Logic",
            "description": "Add runtime environment detection to handle environment-specific authentication behavior",
            "dependencies": ["13.2"],
            "details": "Create src/utils/environment.ts utility to detect current environment (localhost, preview, production) based on window.location or import.meta.env. Update src/lib/supabase.ts to include environment-aware configuration options. Add dynamic redirect URL construction based on current environment. Implement environment-specific error handling and logging for authentication flows. Consider preview environment domain patterns for *.pages.dev detection.",
            "status": "pending",
            "testStrategy": "Test environment detection accuracy across all deployment contexts and verify authentication flows adapt correctly to each environment"
          },
          {
            "id": 5,
            "title": "Validate and Test Multi-Environment Authentication Flow",
            "description": "Comprehensive testing and validation of authentication across all environments",
            "dependencies": ["13.3", "13.4"],
            "details": "Perform end-to-end authentication testing in local development (localhost:4321), Cloudflare preview deployments (*.pages.dev), and production (surfing.salty.vip). Test Google One Tap, OAuth flows, and session persistence across environments. Verify proper session storage, token refresh, and authentication state management. Test error scenarios including network failures, invalid tokens, and environment configuration issues. Document any environment-specific authentication behaviors or limitations.",
            "status": "pending",
            "testStrategy": "Execute authentication test suite covering sign-in, sign-out, session persistence, and error handling across all three environment types with multiple OAuth providers"
          }
        ]
      },
      {
        "id": 14,
        "title": "Setup GitHub Actions Environment Variables",
        "description": "Configure build-time environment variables in GitHub repository secrets",
        "details": "Add required environment variables to GitHub repository secrets: PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, PUBLIC_GOOGLE_CLIENT_ID, PUBLIC_APPLE_SERVICES_ID, PUBLIC_APPLE_REDIRECT_URI. Update GitHub Actions workflow to inject these variables during build process. Ensure variables are available during Astro build for static generation.",
        "testStrategy": "Verify GitHub Actions build succeeds with environment variables and built site includes correct configuration",
        "priority": "medium",
        "dependencies": [2],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Add Environment Variables to GitHub Repository Secrets",
            "description": "Configure the required authentication environment variables as GitHub repository secrets",
            "dependencies": [],
            "details": "Navigate to GitHub repository Settings > Secrets and variables > Actions. Add the following repository secrets: PUBLIC_SUPABASE_URL (Supabase project URL), PUBLIC_SUPABASE_ANON_KEY (Supabase anonymous key), PUBLIC_GOOGLE_CLIENT_ID (Google OAuth client ID), PUBLIC_APPLE_SERVICES_ID (Apple Services ID), PUBLIC_APPLE_REDIRECT_URI (Apple redirect URI). These secrets will be used in GitHub Actions workflows for build-time variable injection.",
            "status": "pending",
            "testStrategy": "Verify all secrets are properly added in GitHub repository settings and accessible to workflows"
          },
          {
            "id": 2,
            "title": "Update GitHub Actions Build Workflow with Environment Variables",
            "description": "Modify the existing build workflow to inject environment variables during the build process",
            "dependencies": ["14.1"],
            "details": "Update .github/workflows/actions.yaml to include environment variables in the build job. Add an 'env:' section to the build step that maps GitHub secrets to environment variables: PUBLIC_SUPABASE_URL: ${{ secrets.PUBLIC_SUPABASE_URL }}, PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.PUBLIC_SUPABASE_ANON_KEY }}, PUBLIC_GOOGLE_CLIENT_ID: ${{ secrets.PUBLIC_GOOGLE_CLIENT_ID }}, PUBLIC_APPLE_SERVICES_ID: ${{ secrets.PUBLIC_APPLE_SERVICES_ID }}, PUBLIC_APPLE_REDIRECT_URI: ${{ secrets.PUBLIC_APPLE_REDIRECT_URI }}. Ensure these are available during 'npm run build' step.",
            "status": "pending",
            "testStrategy": "Test that GitHub Actions build completes successfully with environment variables properly injected"
          },
          {
            "id": 3,
            "title": "Update GitHub Actions Deploy Workflow with Environment Variables",
            "description": "Modify the Cloudflare Pages deployment workflow to include environment variables during build",
            "dependencies": ["14.1"],
            "details": "Update .github/workflows/deploy.yml to include the same environment variables in the Build step. Add 'env:' section before the 'npm install && npm run build' command that maps all GitHub secrets to their corresponding environment variable names. This ensures the production build on Cloudflare Pages has access to the authentication configuration during static site generation.",
            "status": "pending",
            "testStrategy": "Verify that Cloudflare Pages deployment succeeds and built site includes correct authentication configuration"
          },
          {
            "id": 4,
            "title": "Validate Environment Variable Injection in Astro Build",
            "description": "Ensure Astro properly recognizes and processes PUBLIC_ prefixed environment variables during static generation",
            "dependencies": ["14.2", "14.3"],
            "details": "Verify that Astro's build process correctly handles PUBLIC_ prefixed environment variables from GitHub Actions. Test that import.meta.env.PUBLIC_* variables are properly available during build time and get embedded into the static build output. Check that the existing Supabase client configuration in src/lib/supabase.ts can access these variables during the build process without errors.",
            "status": "pending",
            "testStrategy": "Run a test build locally with mock environment variables to verify they are properly embedded in the static output"
          },
          {
            "id": 5,
            "title": "Test End-to-End GitHub Actions Environment Variable Flow",
            "description": "Perform comprehensive testing of the complete GitHub Actions environment variable setup",
            "dependencies": ["14.2", "14.3", "14.4"],
            "details": "Create a test pull request to trigger the GitHub Actions workflows and verify: 1) Build workflow completes successfully with environment variables, 2) Check workflow passes without environment-related errors, 3) Deploy workflow successfully builds and deploys to Cloudflare Pages, 4) Built site properly initializes Supabase client with injected variables, 5) No build errors related to missing PUBLIC_ environment variables. Monitor GitHub Actions logs for any environment variable related issues.",
            "status": "pending",
            "testStrategy": "Monitor GitHub Actions workflow execution and verify successful completion of all jobs with proper environment variable injection"
          }
        ]
      },
      {
        "id": 15,
        "title": "Setup Cloudflare Pages Environment Variables",
        "description": "Configure runtime environment variables in Cloudflare Pages dashboard",
        "details": "In Cloudflare Pages dashboard: 1) Add environment variables for production and preview environments, 2) Configure separate values for preview vs production if needed, 3) Ensure variables are available during both build and runtime, 4) Test automatic deployment from GitHub integration.",
        "testStrategy": "Verify environment variables are correctly loaded in both preview and production Cloudflare deployments",
        "priority": "medium",
        "dependencies": [2],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Access Cloudflare Pages Dashboard",
            "description": "Navigate to Cloudflare dashboard and locate the Surfing project's Pages environment variables section",
            "dependencies": [],
            "details": "Log into Cloudflare dashboard, navigate to Pages section, find the 'surfing' project, and access the Settings > Environment variables section to prepare for configuration.",
            "status": "pending",
            "testStrategy": "Verify access to environment variables configuration panel in Cloudflare Pages"
          },
          {
            "id": 2,
            "title": "Configure Production Environment Variables",
            "description": "Add all required PUBLIC_ environment variables for production deployment",
            "dependencies": ["15.1"],
            "details": "Add the following environment variables to Production environment: PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, PUBLIC_GOOGLE_CLIENT_ID, PUBLIC_APPLE_SERVICES_ID, PUBLIC_APPLE_REDIRECT_URI. Use production values for each variable.",
            "status": "pending",
            "testStrategy": "Verify all production environment variables are saved and display correctly in Cloudflare dashboard"
          },
          {
            "id": 3,
            "title": "Configure Preview Environment Variables",
            "description": "Add environment variables for preview/staging deployments with appropriate values",
            "dependencies": ["15.2"],
            "details": "Configure Preview environment with the same PUBLIC_ prefixed variables but using staging/development values where appropriate. This ensures pull request previews work correctly with proper authentication setup.",
            "status": "pending",
            "testStrategy": "Verify preview environment variables are configured and differ from production where needed"
          },
          {
            "id": 4,
            "title": "Verify Build and Runtime Availability",
            "description": "Ensure environment variables are accessible during both build time and runtime in Cloudflare Pages",
            "dependencies": ["15.2", "15.3"],
            "details": "Configure variables to be available during build process (for Astro static generation) and at runtime (for client-side access). Verify the PUBLIC_ prefix ensures client-side availability as required by src/lib/supabase.ts.",
            "status": "pending",
            "testStrategy": "Test that import.meta.env.PUBLIC_* variables are accessible during build and in browser console"
          },
          {
            "id": 5,
            "title": "Test Automatic GitHub Integration",
            "description": "Verify automatic deployment triggers and environment variable injection from GitHub repository",
            "dependencies": ["15.4"],
            "details": "Test the existing GitHub Actions workflow integration by triggering a deployment. Verify that the Cloudflare Pages environment variables are properly injected and the build succeeds with authentication functionality working.",
            "status": "pending",
            "testStrategy": "Trigger a GitHub push to main branch and verify successful Cloudflare Pages deployment with working authentication features"
          }
        ]
      },
      {
        "id": 16,
        "title": "Implement Comprehensive Error Handling",
        "description": "Add robust error handling throughout the authentication flow",
        "details": "Implement error handling for: 1) Network failures during authentication, 2) Invalid credentials or tokens, 3) Provider service outages, 4) CORS errors, 5) Environment configuration issues. Create user-friendly error messages and logging for debugging. Include retry mechanisms where appropriate and graceful degradation when services are unavailable.",
        "testStrategy": "Test error scenarios including network failures, invalid tokens, CORS issues, and verify appropriate user feedback",
        "priority": "medium",
        "dependencies": [8],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 17,
        "title": "Add Client-Side Loading States",
        "description": "Implement loading states and visual feedback during authentication",
        "details": "Add loading indicators for: 1) Authentication in progress, 2) Token validation, 3) Session initialization, 4) Logout process. Use appropriate loading spinners, disabled states, and progress indicators. Ensure good user experience during potentially slow network operations.",
        "testStrategy": "Test loading states across different network conditions and verify smooth user experience",
        "priority": "low",
        "dependencies": [8],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 18,
        "title": "Implement Security Best Practices",
        "description": "Add security enhancements including nonce validation and replay attack prevention",
        "details": "Implement security measures: 1) Unique nonce generation for each Google sign-in attempt, 2) One-time use enforcement for nonces, 3) Token expiration validation, 4) Secure session storage practices, 5) HTTPS enforcement in production. Add security headers and ensure no sensitive data is logged or exposed.",
        "testStrategy": "Test nonce uniqueness, replay attack prevention, token validation security, and verify no security vulnerabilities",
        "priority": "high",
        "dependencies": [5],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 19,
        "title": "Create Development Documentation",
        "description": "Document setup processes, configuration, and troubleshooting guides",
        "details": "Create comprehensive documentation including: 1) Environment variable setup guide, 2) Google Cloud Platform configuration steps, 3) Apple Developer Portal setup instructions, 4) Supabase configuration guide, 5) Troubleshooting common issues, 6) Local development setup instructions. Include screenshots and step-by-step instructions.",
        "testStrategy": "Verify documentation is accurate by following steps on a fresh setup and ensuring all configurations work",
        "priority": "low",
        "dependencies": [15],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 20,
        "title": "Comprehensive Testing Suite",
        "description": "Test authentication functionality across all environments and scenarios",
        "details": "Perform comprehensive testing: 1) Google One Tap authentication flow, 2) Sign In with Apple flow, 3) Session persistence across page refreshes, 4) Logout functionality, 5) Cross-environment compatibility (local, preview, production), 6) Error scenarios and edge cases, 7) Security validation including nonce verification, 8) UI/UX testing across devices and browsers.",
        "testStrategy": "Create test checklist covering all authentication scenarios, security aspects, and cross-environment functionality. Document test results and any issues found.",
        "priority": "high",
        "dependencies": [16, 17, 18],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-10-03T06:15:56.984Z",
      "updated": "2025-10-03T16:18:28.616Z",
      "description": "Tasks for master context"
    }
  }
}

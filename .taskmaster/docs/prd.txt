# Product Requirements Document: One-Click Login Implementation

## Project Overview
Implement frictionless authentication on the Surfing website using Google One Tap and Sign In with Apple, powered by Supabase Auth and deployed on Cloudflare Pages.

## Objectives
- Provide seamless, one-click authentication for users with minimal friction
- Support both Google One Tap and Sign In with Apple
- Implement secure, client-side ID Token authentication flow
- Track user behavior for service improvement without being intrusive
- Use Supabase Auth as the sole backend (no custom server required)
- Ensure compatibility across local, preview, and production environments
- Maintain high security standards with nonce verification

## User Experience Goals
- **Non-intrusive**: Authentication available in site-wide header, not blocking content
- **Optional**: Users can browse without logging in
- **Seamless**: One-click login without forms or redirects
- **Privacy-focused**: Track behavior only for logged-in users who consent

## Technical Stack
- **Frontend Framework**: Astro (static site)
- **Authentication Backend**: Supabase Auth
- **Deployment Platform**: Cloudflare Pages
- **Build System**: GitHub Actions
- **Auth Providers**: Google One Tap, Sign In with Apple

## Architecture
- Pure client-side authentication using ID Token flow
- No server-side redirects
- Static HTML/CSS/JS with Astro framework
- Environment-specific configuration via .env (local), Cloudflare Secrets (runtime), GitHub Secrets (build-time)

## Environment Variables Required

### Supabase Configuration
- `PUBLIC_SUPABASE_URL`: Supabase project URL (public, safe for client-side)
- `PUBLIC_SUPABASE_ANON_KEY`: Supabase anonymous key (public, safe for client-side)

### Google OAuth Configuration
- `PUBLIC_GOOGLE_CLIENT_ID`: Google OAuth 2.0 Client ID (public, safe for client-side)

### Apple OAuth Configuration
- `PUBLIC_APPLE_SERVICES_ID`: Apple Services ID (public, safe for client-side)
- `PUBLIC_APPLE_REDIRECT_URI`: Apple return URL (public, safe for client-side)

### Environment-Specific Storage
- **Local Development**: Store in `.env` file
- **Cloudflare Runtime**: Store in Cloudflare Pages Environment Variables
- **GitHub Actions Build**: Store in GitHub Repository Secrets (for build-time variables)

## Implementation Phases

### Phase 1: Foundation Setup (Prerequisites)
**Goal**: Establish core infrastructure and configuration

1.1. **Supabase Project Setup**
- Use existing Supabase testing project initially
- Configure authentication settings for testing environment
- Set up URL configuration for all environments (local, preview, production)
- Configure CORS for local, preview, and production domains
- Note: Production Supabase project will be created separately later

1.2. **Environment Configuration**
- Create `.env.example` with all required variables
- Update `.gitignore` to exclude `.env` files
- Document environment variable setup process

1.3. **Dependency Installation**
- Install Supabase JavaScript client: `@supabase/supabase-js`
- Verify compatibility with Astro static build

### Phase 2: Google One Tap Integration
**Goal**: Implement Google One Tap authentication with nonce verification

2.1. **Google Cloud Platform Configuration**
- Create/configure OAuth 2.0 Client ID in Google Cloud Console
- Set up OAuth consent screen
- Configure authorized JavaScript origins for all environments:
  - `http://localhost:4321` (local dev)
  - `https://surfing.salty.vip` (production)
  - `https://*.pages.dev` (Cloudflare previews)

2.2. **Supabase Google Provider Setup**
- Enable Google provider in Supabase dashboard
- Add Google Client ID to "Authorized Client IDs" list
- Verify ID Token flow configuration

2.3. **Client-Side Implementation**
- Create Supabase client initialization module
- Implement SHA-256 hashing utility for nonce
- Create Google One Tap UI component
- Implement nonce generation and verification flow
- Create callback handler for Google sign-in
- Integrate with Supabase `signInWithIdToken` method

2.4. **Security Implementation**
- Implement secure nonce generation
- Add SHA-256 hashing for nonce validation
- Implement replay attack prevention
- Add error handling and logging

### Phase 3: Sign In with Apple Integration
**Goal**: Implement Sign In with Apple authentication

3.1. **Apple Developer Portal Configuration**
- Create App ID with Sign in with Apple capability
- Create Services ID (will be used as Client ID)
- Configure domains and return URLs:
  - Production: `surfing.salty.vip`
  - Cloudflare: `pages.dev`
- Register return URL: `https://surfing.salty.vip/auth/callback`

3.2. **Supabase Apple Provider Setup**
- Enable Apple provider in Supabase dashboard
- Add Apple Services ID to "Authorized Client IDs" list
- Verify client-side flow configuration (no private key needed)

3.3. **Client-Side Implementation**
- Load Apple Sign In JS library
- Create Apple sign-in button component
- Initialize AppleID.auth with proper configuration
- Implement success/failure event handlers
- Integrate with Supabase `signInWithIdToken` method

### Phase 4: Unified Session Management
**Goal**: Create cohesive user experience across both auth methods

4.1. **Auth State Management**
- Implement `onAuthStateChange` listener
- Create centralized auth state handler
- Implement UI state toggling (authenticated/unauthenticated)
- Handle session persistence and refresh

4.2. **User Interface Components**
- Create authentication container (login buttons)
- Create user profile container (user info + logout)
- Implement dynamic visibility toggling
- Add loading states and error messages

4.3. **Logout Implementation**
- Create logout button component
- Implement `signOut()` functionality
- Handle auth state cleanup
- Update UI on successful logout

### Phase 5: Multi-Environment Support
**Goal**: Ensure authentication works across all deployment environments

5.1. **Supabase URL Configuration**
- Set primary Site URL to production domain
- Add wildcard patterns for preview environments:
  - `http://localhost:4321/**`
  - `https://*.pages.dev/**`
  - `https://surfing.salty.vip/**`

5.2. **CORS Configuration**
- Add all environment origins to Supabase CORS settings
- Test cross-origin requests from each environment

5.3. **Provider Domain Configuration**
- Update Google authorized origins for all environments
- Update Apple domains for all environments
- Verify token validation across environments

### Phase 6: Integration with Astro
**Goal**: Seamlessly integrate authentication into existing Astro site

6.1. **Component Architecture**
- Create reusable Astro components for auth UI
- Implement client-side hydration for auth components
- Ensure compatibility with Astro's static build
- Design non-intrusive UI (small buttons/avatar in header)

6.2. **Site-Wide Header Integration**
- Locate existing site header/navigation component
- Add auth components to header (top-right corner typical placement)
- Implement conditional rendering based on auth state
- Show login buttons when logged out, user avatar/menu when logged in
- Ensure proper script loading order
- Maintain responsive design for mobile/desktop

6.3. **Build Configuration**
- Configure environment variables for Astro build
- Set up public vs. private variable handling
- Ensure static build includes all client-side auth code

### Phase 7: Deployment Configuration
**Goal**: Configure deployment pipelines for all environments

7.1. **GitHub Actions Setup**
- Add GitHub Secrets for build-time variables
- Update build workflow to inject environment variables
- Test build with environment variables

7.2. **Cloudflare Pages Setup**
- Add environment variables to Cloudflare dashboard
- Configure separate variables for preview vs. production
- Set up automatic deployment from GitHub

7.3. **Local Development Setup**
- Document `.env` file setup process
- Create development startup guide
- Test local authentication flow

### Phase 8: Testing & Validation
**Goal**: Comprehensive testing across all scenarios

8.1. **Functional Testing**
- Test Google One Tap login flow
- Test Sign In with Apple flow
- Test logout functionality
- Test session persistence
- Test automatic identity linking (same email, different providers)

8.2. **Environment Testing**
- Test authentication in local development
- Test authentication on Cloudflare preview deployments
- Test authentication on production domain
- Verify URL redirects work correctly

8.3. **Security Testing**
- Verify nonce validation for Google
- Test replay attack prevention
- Verify CORS restrictions
- Test token expiration and refresh
- Verify unauthorized redirect blocking

8.4. **Error Handling Testing**
- Test network failures
- Test invalid credentials
- Test provider service outages
- Test CORS errors
- Verify user-friendly error messages

### Phase 9: Documentation & Monitoring
**Goal**: Ensure maintainability and observability

9.1. **Developer Documentation**
- Document environment variable setup
- Create provider configuration guides (Google, Apple)
- Document Supabase setup steps
- Create troubleshooting guide

9.2. **User Documentation**
- Create user-facing login instructions
- Document supported browsers
- Create privacy policy updates (if needed)

9.3. **Monitoring Setup**
- Implement client-side error logging
- Add authentication event tracking
- Set up Supabase dashboard monitoring
- Create alerts for auth failures

## Security Requirements

### Nonce Verification (Google)
- Generate unique nonce per sign-in attempt
- Use SHA-256 hashing for nonce transmission
- Send raw nonce to Supabase for validation
- Implement one-time use enforcement

### Token Validation
- Verify ID tokens server-side via Supabase
- Validate token audience (aud) claim
- Check token expiration
- Verify token signature

### Data Protection
- Never expose secret keys in client-side code
- Use Supabase Row Level Security (RLS) for data access
- Implement proper session storage
- Use HTTPS for all environments

## Data Storage Strategy
- **User Authentication Data**: Stored in Supabase Auth (built-in)
  - User ID, email, provider info
  - OAuth tokens and refresh tokens
  - Session management
- **User Profiles**: Stored in Supabase Auth user metadata (no custom tables needed initially)
  - Display name
  - Avatar URL
  - Last login timestamp
- **Behavior Tracking**: Can be added later using Supabase Analytics or custom events
- **No Custom Backend Server**: All data operations through Supabase client library

## Success Criteria
- Users can successfully sign in with Google One Tap
- Users can successfully sign in with Apple
- Same email across providers links to single account
- Authentication works in local, preview, and production
- Session persists across page refreshes
- Logout successfully clears session
- Nonce verification prevents replay attacks
- No CORS errors in any environment
- Error messages are clear and actionable
- Auth UI is non-intrusive and accessible from all pages via header
- User can browse site content without being forced to log in

## Dependencies
- Supabase account with active project
- Google Cloud Platform account with OAuth credentials
- Apple Developer account with proper configuration
- Cloudflare Pages deployment
- GitHub repository with Actions enabled

## Constraints
- Pure static site (no server-side rendering)
- Client-side only authentication flow
- Must work with Astro static build
- Must support multiple deployment environments
- Must maintain security best practices

## Future Enhancements (Out of Scope for Initial Implementation)
- Additional OAuth providers (GitHub, Facebook, etc.)
- Multi-factor authentication (MFA)
- User profile management UI (edit profile, preferences)
- Role-based access control (RBAC)
- Social features requiring authentication (comments, likes, bookmarks)
- Advanced behavior tracking and analytics dashboard
- User preferences and personalization
- Production Supabase project migration (to be done separately)

## Risks & Mitigations

### Risk: Environment Configuration Mismatch
**Mitigation**: Comprehensive checklist and validation script for all environment URLs

### Risk: Token Validation Failures
**Mitigation**: Detailed error logging and comprehensive testing across providers

### Risk: CORS Blocking
**Mitigation**: Wildcard patterns in Supabase configuration, thorough testing

### Risk: Nonce Implementation Errors
**Mitigation**: Reference implementation from official Supabase docs, security audit

### Risk: Provider Service Downtime
**Mitigation**: Graceful error handling, multiple provider options for users
